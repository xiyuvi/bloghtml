<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>为服务器安装雷池WAF防火墙</title>
    <link href="/2023/12/08/34/"/>
    <url>/2023/12/08/34/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么需要waf防火墙"><a href="#为什么需要waf防火墙" class="headerlink" title="为什么需要waf防火墙"></a>为什么需要waf防火墙</h3><p>如何选择一款适合自己网站的waf防火墙？网站安全是每一个网站运营者都必须面对的问题，尤其是在网络攻击日益频繁和复杂的今天。如果网站被黑客入侵或者遭受DDoS攻击，不仅会造成数据泄露、网站瘫痪等严重后果，还会影响网站的信誉和用户体验。因此，选择一款合适的waf防火墙是保障网站安全的重要措施之一，比如我的网站就在前段时间被淄博的张兴强攻击。<br><img src="/img/34/1.png" alt="雷池WAF防火墙"><br>waf防火墙是一种专门针对Web应用程序的安全防护设备，它可以检测和拦截Web层面的各种攻击，如SQL注入、XSS跨站脚本、CSRF跨站请求伪造等。waf防火墙可以有效地提升网站的安全性能和抵御能力，保护网站免受黑客的侵扰。</p><p>市面上有很多不同类型和品牌的waf防火墙供用户选择，但是如何找到一款适合自己网站的waf防火墙呢？在这里，我想向大家推荐一款我个人非常喜欢并且使用过的waf防火墙——雷池waf防火墙。<br><img src="/2023/12/08/34/1.jpg" alt="雷池waf防火墙1"><br>雷池waf防火墙是一款国产的智能waf防火墙，它有以下几个优点：</p><ul><li><p>免费而且容易安装。雷池waf防火墙提供了免费版和企业版两种版本，免费版就可以满足中小型网站的基本需求，而且安装非常简单，只需要执行官方文档里的一行命令即可。即使不懂运维知识也可以轻松使用。</p></li><li><p>对中文用户更友好。相比国外的waf防火墙，雷池waf防火墙更加适合中文用户使用，它支持中文界面可视化操作，并且有使用问题可以直接在官方微信群反馈，会有专业的技术人员跟进和解决。</p></li><li><p>功能更多价格更有竞争力。相比国内的其他waf防火墙，雷池waf防火墙免费用户的功能更多，包括CC攻击防护、恶意爬虫拦截、SSL证书管理等。如果需要更高的防护效果完全可以选购企业版，价格比同类产品更有竞争力，更加灵活和经济。<br><img src="/2023/12/08/34/2.png" alt="雷池waf防火墙2"><br>除了以上的优点，雷池waf防火墙还有很多其他的特色和亮点，比如：</p></li><li><p>更新频率很高的智能防护。雷池waf防火墙同时利用人工智能和大数据分析技术，可以自动识别和拦截新型的攻击手法，提供更加智能和高效的防护服务。</p></li><li><p>支持多种Web应用程序。雷池waf防火墙支持多种Web应用程序，如WordPress、Drupal、Joomla、Magento等，无论你的网站是基于什么平台或者语言开发的，都可以使用雷池waf防火墙进行保护。</p></li><li><p>提供丰富的报表和统计。雷池waf防火墙提供了丰富的报表和统计功能，可以让用户实时了解网站的流量、攻击、拦截等情况，方便用户进行分析和优化。<br><img src="/2023/12/08/34/3.jpg" alt="雷池waf防火墙3"><br><img src="/2023/12/08/34/4.jpg" alt="雷池waf防火墙4"><br><img src="/2023/12/08/34/5.jpg" alt="雷池waf防火墙5"><br>目前我的网站已经部署了雷池waf防火墙，我认为雷池waf防火墙是一款非常优秀的waf防火墙产品，特别是使用未升级的thinkphp等动态语言框架写的网站，可能有些源码已经失去了维护者，waf可以在代码已知有漏洞的情况下阻止黑客的恶意攻击。雷池waf防火墙可以为中小型网站提供免费而且高效的安全防护服务，让用户无需担心网站被黑客攻击或者遭受攻击。如果你也想给你的网站增加一层安全保障，不妨试试雷池waf防火墙吧！</p></li></ul><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSLk https://waf-ce.chaitin.cn/release/latest/setup.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>输入以上命令即可安装雷池WAF到你的服务器，安装和使用方法官方文档里都有详细描写。<a href="https://waf-ce.chaitin.cn/docs">雷池WAF防火墙官方文档</a></p><h3 id="宝塔面板安装雷池WAF防火墙后防护网站无效解决办法"><a href="#宝塔面板安装雷池WAF防火墙后防护网站无效解决办法" class="headerlink" title="宝塔面板安装雷池WAF防火墙后防护网站无效解决办法"></a>宝塔面板安装雷池WAF防火墙后防护网站无效解决办法</h3><p>如果你和我一样也在使用宝塔面板，那么因为宝塔nginx会占用80端口导致雷池WAF的防护网站配置无效，需要修改以下目录的文件80端口为任意其他端口。nginx路径：&#x2F;www&#x2F;server&#x2F;panel&#x2F;vhost&#x2F;nginx</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">0</span><span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.conf</span><br>phpfpm_status<span class="hljs-selector-class">.conf</span><br>站点配置文件<br></code></pre></td></tr></table></figure><p>修改后，雷池WAF防火墙就可以正常使用了，今天发现最新版本的雷池waf更新日志里有：“修复创建或修改站点时，端口占用检查没有生效的问题”。也许以后宝塔面板配合雷池waf防火墙就不需要手动修改宝塔端口了。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>waf</tag>
      
      <tag>防火墙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如无必要勿增实体:简单有效的app升级方案</title>
    <link href="/2023/12/03/33/"/>
    <url>/2023/12/03/33/</url>
    
    <content type="html"><![CDATA[<p>app开发的时候需要经常给app发布新版本，修复bug，增加功能，提升用户体验。我曾经使用一直使用uniCloud的app升级中心，这是一个很方便的工具，可以让我在云端管理我的app版本，设置升级策略，推送更新通知，跟踪升级情况。uniCloud的app升级中心有一个免费方案，可以免费使用一定量的cdn流量和云函数调用。但是，随着app数量和单个app用户越来越多，免费方案的资源已经不够用了，很可能在未来需要升级到付费方案，这样就会图增成本。<br><img src="/img/33/1.png" alt="奥卡姆剃刀"><br>前段时间，更新一个很久之前同事开发的app时发现，它使用了一种非常简单有效的app升级方案。它没有依赖于任何第三方服务，也没有依赖任何后端接口服务，只需要在服务器上放一个xml文件，里面包含了app的版本号、下载地址、更新说明等信息。每次打开app的时候，它就会请求这个xml文件，根据版本号判断是否需要升级。如果需要升级，它就会弹出一个对话框，显示更新说明，并提供一个下载按钮。点击下载按钮后，它就会跳转到浏览器，从指定的地址下载新版本的app文件，并提示用户安装。</p><p>这种方案非常简单有效，它只依赖于服务器上的一个xml文件和手动更新的下载地址，不需要任何额外的资源和费用。它也可以灵活地控制升级策略，比如可以设置强制升级或者可选升级，可以针对不同的平台或者渠道发布不同的版本等。它还可以保证用户获取到最新的版本，避免因为缓存或者网络问题导致下载失败或者下载错误的版本。它非常符合“如无必要勿增实体”的原则，它没有引入不必要的复杂性和成本，只使用了最简单和最有效的方法实现了app升级功能。我准备以后有新的app要编写时，都采用这种类似的简单方案，并做一些改进。比如，把xml文件改为json文件，这样更加简洁和易读。还可以参考uniCloud的方式把点击更新后跳转到浏览器下载的方式改为点击更新后当前页面自动下载app文件并自动安装的方式，这样更加方便和快捷。</p><p>在这个过程中，我感受到了“如无必要勿增实体”的重要性。这是一条经典的设计原则，也叫做奥卡姆剃刀原则（Occam’s razor），它告诉我们在解决问题时应该尽量使用最少和最简单的假设和方法。这样可以避免引入不必要的复杂性和成本，提高效率和可靠性。当然，并不是说越简单越好，而是说在满足需求和质量的前提下越简单越好。有时候为了实现更好的功能和体验，我们也需要引入一些复杂性和成本，但是我们应该尽量保持平衡和适度。<br>奥卡姆剃刀原则的逻辑思考可以应用在程序开发的各个角落，举个真实的例子（双引号内容为当时聊天原文），在一个前端框架交流群内，有人问了这么一个问题：</p><div class="note note-secondary">            <p>他：“有人做过打卡系统吗，现在遇到一个问题, 有个统计考勤, 但是数据库中只会存已经打卡的记录，没有缺卡的记录, 这就导致统计的时候不会给我反缺卡数据, 后端想让我自己补全这个缺卡, 但是我觉得不是很妥, 这个有没有后端的人提供下思路”</p>          </div><div class="note note-info">            <p>我：“打卡是一个人在一天内存了一个打卡的数据，没打卡，就是没存嘛，你觉得应该是谁在什么时间存入了缺卡的数据？”</p>          </div><p>（我觉得一件事情不应当这样处理时就会反问对方是怎么想的，因为我觉得缺少的数据这种东西本来就不应该存入数据库，所以想听听他的思路）</p><div class="note note-secondary">            <p>他：“我是这样认为的 想着数据库要是有一份缺卡记录就好了”</p>          </div><div class="note note-info">            <p>我：“那样更麻烦，又回到这个问题了，你想怎么存缺卡数据，我理解的只能让后端每天的00：:00搞定时任务才能存缺卡数据，但是本来你已知打卡信息了，缺卡就是本月天数-打卡，让后端搞定时任务就是脱裤子放屁，增加了没有必要的程序复杂度，万一定时任务没执行呢 万一用户修改了允许打卡时间，你这个定时任务执行的时间到底有没有bug，都不知道，如无必要,勿增实体”</p>          </div><div class="note note-info">            <p>我：“要么数据库保持不变，后端接口处把缺卡数据给你返回，要么前端前端 增加一份缺卡数据，这是比较合理的”</p>          </div><p>简而言之，“如无必要勿增实体”是一条值得我们遵循和学习的设计原则，不止是在编写代码时，我们应该尽量使用最简单和最有效的方案，避免不必要的复杂性和成本，提高用户满意度，在生活中也同样如此，不把本来可以简单完成的事情复杂化。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>奥卡姆剃刀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给爷爷安排扫地机器人和助听器</title>
    <link href="/2023/11/19/32/"/>
    <url>/2023/11/19/32/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>爷爷以前当兵打仗的时候炮声把耳朵震得听力下降很严重，几年前我就想给他买个助听器，但是因为不太了解这个产品怕浪费钱打消了念头，前几天无意间刷到一个网友给家里老人买了科大讯飞助听器的评论消息，助听器我不了解，科大讯飞我还是比较清楚的，国内语音识别等声音领域的老大，所以没再犹豫无脑买了科大讯飞至尊版助听器，还送了一台赠品松下血压计刚好给奶奶用。<br><img src="/img/32/1.png" alt="扫地机器人和助听器"><br><img src="/2023/11/19/32/1.webp" alt="科大讯飞助听器"></p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>周末回老家的时候。给他安装了小米扫地机器人和助听器，扫地机器人是爸爸上周带回来的，就等我来安装，希望这两位巧匠能给他的生活带来一些便利。爷爷对这些新奇的东西比较感兴趣，我简单教会了他怎么给机器人上水、洗拖布、倒垃圾，怎么控制机器人的工作模式。搞完这些，我又把科大讯飞助听器连接好了爷爷的手机并对他进行了听力检测，让助听器专门为爷爷的听力而定制。爷爷戴上助听器后，说声音清晰多了，不用再费力地听别人说话了。我看着爷爷开心的样子，心里也很高兴。<br><img src="/2023/11/19/32/2.webp" alt="听力检测图"></p><h3 id="小遗憾"><a href="#小遗憾" class="headerlink" title="小遗憾"></a>小遗憾</h3><p>不过，我也发现了一些问题。爷爷对这些高科技产品还不太熟悉，理想模式是我给爷爷提前设置好了助听器音量和连接手机，他只负责充电使用就行了，其他选项都不允许他误触，但是实际情况是爷爷有时候会按错助听器上的按钮导致助听器重新进入配对模式，有时候在拿取助听器的时候会误触耳机上的音量加减按键。我想，这些产品虽然很先进，但是并没有完全考虑到老人的使用习惯和需求，没有做好适老化的设计。科技进步是好事，但是也应该要为老人着想一点，让他们能更方便地享受科技带来的好处。</p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>家人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一次网站被山西淄博张*强攻击的回顾</title>
    <link href="/2023/11/19/31/"/>
    <url>/2023/11/19/31/</url>
    
    <content type="html"><![CDATA[<h3 id="被攻击回顾"><a href="#被攻击回顾" class="headerlink" title="被攻击回顾"></a>被攻击回顾</h3><p>九月底网站被攻击，本来就是非盈利网站也没当回事。直到11月2号有人在我的博客评论区贴了一个链接，我才了解攻击者的信息。<br> <a href="https://hostloc.com/thread-1224989-1-1.html">hostloc.com&#x2F;thread-1224989-1-1.html</a><br>链接的楼主技术比较厉害，他的网站被攻击损失了1500元，之后他溯源攻击ip，并且发现了攻击者的服务器对我的域名xiyu.pro的攻击行为。楼主是如何溯源攻击者的这里不在赘述，有兴趣可以去原帖看一下，十分的精彩。<br><img src="/img/31/1.png" alt="山西淄博张兴强"></p><h3 id="补充证据"><a href="#补充证据" class="headerlink" title="补充证据"></a>补充证据</h3><p>除了我的网站日志存在大量楼主指出的攻击者服务器ip外，还发现了攻击前后，身在山东淄博的张兴强浏览我的网站的记录。都说罪犯会在事后围观现场，这句话真是一点错也没有。<br><img src="/1.jpg"></p><h3 id="攻击者身份信息"><a href="#攻击者身份信息" class="headerlink" title="攻击者身份信息"></a>攻击者身份信息</h3><p>根据链接中的信息可以知道攻击者的身份信息如下：<br>姓名：张*强<br>qq号码:1185209862<br>github:github.com&#x2F;zxq1998<br>使用域名：zxqme.com、zxq1998.top<br>地址：山东省淄博市张店自创五金建材综合商店</p><h3 id="报警后续"><a href="#报警后续" class="headerlink" title="报警后续"></a>报警后续</h3><p>得知攻击人的身份后我第一时间去辖区派出所报警，也可能是民警太忙了，并没有重视我的这个案情，反正我已经将所有的网站日志证据和楼主的证据打包保存，以备后续调查使用，期待正义到来的那一天。</p><h3 id="普法"><a href="#普法" class="headerlink" title="普法"></a>普法</h3><p>《中华人民共和国刑法》第二百八十六条违反国家规定，对计算机信息系统功能进行删除、修改、增加、干扰，造成计算机信息系统不能正常运行，后果严重的，处五年以下有期徒刑或者拘役;后果特别严重的，处五年以上有期徒刑。 违反国家规定，对计算机信息系统中存储、处理或者传输的数据和应用程序进行删除、修改、增加的操作，后果严重的，依照前款的规定处罚。 故意制作、传播计算机病毒等破坏性程序，影响计算机系统正常运行，后果严重的，依照第一款的规定处罚。 单位犯前三款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照第一款的规定处罚。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动端上拉抽屉效果</title>
    <link href="/2023/11/04/30/"/>
    <url>/2023/11/04/30/</url>
    
    <content type="html"><![CDATA[<h3 id="移动端抽屉"><a href="#移动端抽屉" class="headerlink" title="移动端抽屉"></a>移动端抽屉</h3><p>移动端上拉抽屉是一种常见的交互效果，可以在屏幕底部显示一个可拖动的视图，用于展示更多的内容或功能。实现这种效果的代码有多种方式，这里介绍一种基于CSS和JavaScript的demo，代码和演示效果如下。</p><div class="note note-primary">            <p>demo仅在移动端有效，pc端无效</p>          </div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>移动端拖住增加元素高度<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#drag-element</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">46</span>, <span class="hljs-number">228</span>, <span class="hljs-number">197</span>);</span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">max-height</span>: <span class="hljs-number">90%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;drag-element&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;drag-element&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> initialTouchPosition;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> initialElementHeight;</span><br><span class="language-javascript">    element.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">      initialTouchPosition = event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>;</span><br><span class="language-javascript">      initialElementHeight = element.<span class="hljs-property">offsetHeight</span>;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    element.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> currentTouchPosition = event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> touchDistance = initialTouchPosition - currentTouchPosition;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> newElementHeight = initialElementHeight + touchDistance;</span><br><span class="language-javascript">      element.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;newElementHeight&#125;</span>px`</span>;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    element.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchend&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      initialTouchPosition = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">      initialElementHeight = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><p>示例如下,打开<a href="https://xiyu.pro/demo/move.html" target="_blank">移动端抽屉DEMO</a>查看</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>leafletjs中如何自定义控件</title>
    <link href="/2023/06/11/29/"/>
    <url>/2023/06/11/29/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是leafletjs"><a href="#什么是leafletjs" class="headerlink" title="什么是leafletjs"></a>什么是leafletjs</h3><p>Leafletjs是一个开源的JavaScript库，用于创建移动友好的交互式地图。它只有42KB的大小，但拥有大多数开发者所需的地图功能。Leafletjs的设计理念是简单、高效和易用。它可以在所有主流的桌面和移动平台上流畅地运行，可以通过众多的插件进行扩展，拥有一个美观、易用和完善的API文档，以及一个简洁、可读的源代码，方便开发者进行贡献。</p><h3 id="自定义控件DEMO"><a href="#自定义控件DEMO" class="headerlink" title="自定义控件DEMO"></a>自定义控件DEMO</h3><p>自定义控件示例如下,你也可以打开<a href="https://xiyu.pro/demo/map.html" target="_blank">自定义控件DEMO</a>查看</p><iframe src="https://xiyu.pro/demo/map.html" width="100%" height="500" name="topFrame" scrolling="yes"  noresize="noresize" frameborder="0" id="topFrame"></iframe><h3 id="如何自定义控件"><a href="#如何自定义控件" class="headerlink" title="如何自定义控件"></a>如何自定义控件</h3><p>Leafletjs提供了一个基类L.Control，用于创建自定义的地图控件。我们可以通过继承这个类，重写initialize、onAdd和onRemove方法，来实现自己的控件逻辑。例如，我们可以创建一个显示当前地图中心坐标的控件：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 定义一个继承自L.Control的类</span><br>    <span class="hljs-keyword">var</span> CenterControl = L.Control.extend(&#123;<br>        <span class="hljs-comment">// 初始化方法，接收一个选项对象</span><br>        initialize: <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>            <span class="hljs-comment">// 将选项对象合并到this.options中</span><br>            L.Util.setOptions(this, options);<br>        &#125;,<br>        <span class="hljs-comment">// 添加到地图时调用的方法，接收一个地图对象</span><br>        onAdd: <span class="hljs-keyword">function</span> (<span class="hljs-params">map</span>) &#123;<br>            <span class="hljs-comment">// 创建一个div元素作为控件容器</span><br>            <span class="hljs-keyword">var</span> container = L.DomUtil.create(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-string">&#x27;leaflet-bar leaflet-control leaflet-control-custom&#x27;</span>);<br>            <span class="hljs-comment">// 设置容器的样式</span><br>            container.style.backgroundColor = <span class="hljs-string">&#x27;white&#x27;</span>;<br>            container.style.width = <span class="hljs-string">&#x27;auto&#x27;</span>;<br>            container.style.height = <span class="hljs-string">&#x27;30px&#x27;</span>;<br>            <span class="hljs-comment">// 在容器内创建一个span元素用于显示坐标</span><br>            <span class="hljs-keyword">var</span> span = L.DomUtil.create(<span class="hljs-string">&#x27;span&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, container);<br>            span.id = <span class="hljs-string">&#x27;center-coord&#x27;</span>;<br>            span.style.lineHeight = <span class="hljs-string">&#x27;30px&#x27;</span>;<br>            span.style.padding = <span class="hljs-string">&#x27;10px&#x27;</span>;<br>            <span class="hljs-comment">// 获取当前地图中心坐标并显示</span><br>            <span class="hljs-keyword">var</span> center = <span class="hljs-built_in">map</span>.getCenter();<br>            span.innerHTML = <span class="hljs-string">&#x27;Lat: &#x27;</span> + center.lat + <span class="hljs-string">&#x27;, Lng: &#x27;</span> + center.lng;<br>            <span class="hljs-comment">// 监听地图移动事件，更新坐标显示</span><br>            <span class="hljs-built_in">map</span>.on(<span class="hljs-string">&#x27;move&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                center = <span class="hljs-built_in">map</span>.getCenter();<br>                <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(center);<br>                span.innerHTML = <span class="hljs-string">&#x27;Lat: &#x27;</span> + center.lat + <span class="hljs-string">&#x27;, Lng: &#x27;</span> + center.lng;<br>            &#125;);<br>            <span class="hljs-comment">// 返回容器元素</span><br>            <span class="hljs-keyword">return</span> container;<br>        &#125;,<br>        <span class="hljs-comment">// 从地图移除时调用的方法，接收一个地图对象</span><br>        onRemove: <span class="hljs-keyword">function</span> (<span class="hljs-params">map</span>) &#123;<br>            <span class="hljs-comment">// 取消监听地图移动事件</span><br>            <span class="hljs-built_in">map</span>.off(<span class="hljs-string">&#x27;move&#x27;</span>);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 使用自定义控件类创建一个控件实例，并添加到地图右下角</span><br>    <span class="hljs-keyword">var</span> centerControl = <span class="hljs-keyword">new</span> CenterControl(&#123; <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;bottomright&#x27;</span> &#125;);<br>    centerControl.addTo(<span class="hljs-built_in">map</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leaflet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>老兵不死，只是逐渐凋零</title>
    <link href="/2023/06/11/28/"/>
    <url>/2023/06/11/28/</url>
    
    <content type="html"><![CDATA[<p>老兵不死，只是逐渐凋零。是对那些曾经为国家和人民奋斗过的英雄们的感慨。我爷爷也曾是一位剿匪老兵，战争让他听力大大受损，是老兵们用自己的青春和鲜血，换来了我们今天的和平与繁荣。他们是我们的骄傲，我们的榜样，我们的亲人。但是，随着时间的流逝，他们也在一天天老去，一天天失去联系，一天天被遗忘…他们需要我们的关心，我们的尊重，我们的陪伴。<br><img src="/img/28/1.png" alt="老兵不死，只是逐渐凋零"><br>之前参加了腾讯公益的幸存老兵助养行动，通过网络平台可以贡献自己的力量，结果今天消息通知提醒我，“捐款有了新反馈”。<br><img src="/2023/06/11/28/1.jpg"><br><img src="/2023/06/11/28/2.jpg"><br>心里还是蛮开心的，希望通过这样的助养行动，能够让更多的人关注到这些幸存老兵的存在和需求。能够让更多的人尊重和感恩这些为国家和人民奉献过的英雄们。能够让更多的人加入到这样的公益事业中来，让这些老兵不再孤单，不再凋零。</p><p>如果你也想为助养老兵公益行动贡献力量，可以保存以下二维码在微信打开参加<br><img src="/2023/06/11/28/3.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公益</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniapp的vue页面和非全屏webview交换数据的方式</title>
    <link href="/2023/06/03/27/"/>
    <url>/2023/06/03/27/</url>
    
    <content type="html"><![CDATA[<p>在uniapp开发中，有时候我们需要在vue页面中嵌入一个webview组件，用来加载一些本地或远程的网页。但是，如何在vue页面和webview之间实现数据的传递和通信呢？常用的方法是使用uniapp官方提供的组件webview ,使用uni-app提供的UniAppJSBridgeReady事件和postMessage方法，来实现vue页面和webview之间的双向数据交换。但是这种方法有一定的局限性，webview组件设置的宽高等样式只有h5有效，在app中显示只能全屏加载，无法在app中实现vue页面和webview同屏交互，本文将介绍另一种自建webview的方法，可以在app中自定义webview的宽高及显隐。</p><p>首先，我们需要在vue页面中自建一个webview组件，代码如下，下面的代码自建了webview，并且完成了vue页面对html页面数据的接收和发送：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">topHeight</span>: <span class="hljs-number">0</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">windowHeight</span>: <span class="hljs-number">0</span>,</span><br><span class="language-javascript"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/hybrid/html/test.html&quot;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">fun</span>: <span class="hljs-literal">null</span>,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//初始化</span></span><br><span class="language-javascript">            <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 获取系统信息，用于设置webview位置</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;</span><br><span class="language-javascript">uni.<span class="hljs-title function_">getSystemInfo</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;</span><br><span class="language-javascript">_this.<span class="hljs-property">topHeight</span> = res.<span class="hljs-property">statusBarHeight</span></span><br><span class="language-javascript">_this.<span class="hljs-property">windowHeight</span> = res.<span class="hljs-property">windowHeight</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"><span class="hljs-comment">// #ifdef APP-PLUS</span></span><br><span class="language-javascript"><span class="hljs-comment">//自建webview</span></span><br><span class="language-javascript">                <span class="hljs-comment">//如果当前的文件为直接在pages.json声明的vue文件使用this.$scope.$getAppWebview()，</span></span><br><span class="language-javascript">                <span class="hljs-comment">//如果当前的文件为pages.json声明的vue文件引用的子组件，使用this.$parent.$scope.$getAppWebview()</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> currentWebview = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span>.<span class="hljs-property">$scope</span>.$getAppWebview();</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> height = <span class="hljs-variable language_">this</span>.<span class="hljs-property">windowHeight</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">topHeight</span>;</span><br><span class="language-javascript">wv = plus.<span class="hljs-property">webview</span>.<span class="hljs-title function_">create</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">url</span>, <span class="hljs-string">&quot;webview&quot;</span>, &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// plusrequire: &quot;none&quot;, //注释后会无法使用数据交换，请勿放开注释</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#x27;uni-app&#x27;: &#x27;none&#x27;,//注释后会无法使用数据交换，请勿放开注释</span></span><br><span class="language-javascript"><span class="hljs-attr">top</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">topHeight</span> + <span class="hljs-number">20</span>,<span class="hljs-comment">//根据你想要的样式设置top</span></span><br><span class="language-javascript"><span class="hljs-attr">scalable</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//缩放</span></span><br><span class="language-javascript"><span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;100%&#x27;</span>,<span class="hljs-comment">//根据你想要的样式设置宽度</span></span><br><span class="language-javascript"><span class="hljs-attr">height</span>: height - <span class="hljs-number">202</span><span class="hljs-comment">//根据你想要的样式设置高度</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript">currentWebview.<span class="hljs-title function_">append</span>(wv);</span><br><span class="language-javascript"><span class="hljs-comment">//监听子html页面uni.postMessage返回的值，html页面触发plusMessage事件时会自动调用fun函数，实现对html页面返回值的接收和利用</span></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">fun</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (msg.<span class="hljs-property">data</span>.<span class="hljs-property">args</span>.<span class="hljs-property">data</span>.<span class="hljs-property">name</span> == <span class="hljs-string">&#x27;postMessage&#x27;</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> msgData = msg.<span class="hljs-property">data</span>.<span class="hljs-property">args</span>.<span class="hljs-property">data</span>.<span class="hljs-property">arg</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;app接收到消息为:&#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(msgData));</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">plus.<span class="hljs-property">globalEvent</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;plusMessage&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">fun</span>);</span><br><span class="language-javascript"><span class="hljs-comment">// #endif</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">//调用该函数关闭webview渲染</span></span><br><span class="language-javascript"><span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// #ifdef APP-PLUS</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (wv) &#123;</span><br><span class="language-javascript">plus.<span class="hljs-property">webview</span>.<span class="hljs-title function_">close</span>(wv);</span><br><span class="language-javascript">wv = <span class="hljs-literal">null</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// #endif</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">// 发送数据给html页面，本质上是执行了plus渲染的wv上携带的eval() 函数，下面的getData就是html页面要声明的getData函数，通过这种方法传递数据给html页面</span></span><br><span class="language-javascript"><span class="hljs-title function_">evalJs</span>(<span class="hljs-params">msg = <span class="hljs-string">&quot;来自vue页面的参数&quot;</span></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// #ifdef APP-PLUS</span></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`getData(<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(msg)&#125;</span>)`</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (wv) &#123;</span><br><span class="language-javascript">wv.evalJS(str);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// #endif                </span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来，我们需要在html页面中监听UniAppJSBridgeReady事件，这个事件会在webview加载完成后触发。在这个事件的回调函数中，我们可以获取到webview的对象，然后调用它的postMessage方法，向网页发送数据。这里我们假设要发送的数据是一个字符串”Hello, webview!”。代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>map<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">html</span>,</span><br><span class="language-css"><span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 重要,引入了才能交互数据,具体文件可以在uniapp官网下载 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/uni.webview.1.5.4.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;postData&quot;</span>&gt;</span>给app的页面发送数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//组件通信</span></span><br><span class="language-javascript"><span class="hljs-comment">//发送数据到vue组件</span></span><br><span class="language-javascript"><span class="hljs-comment">//UniAppJSBridgeReady事件会在uni.webview.js相关代码加载完成后触发,触发后就可以使用postMessage方法发送数据,一般可以在这个事件里调用一次postMessage来判断代码是否正常运行.</span></span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;UniAppJSBridgeReady&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> message = &#123;</span><br><span class="language-javascript"><span class="hljs-attr">action</span>: <span class="hljs-string">&#x27;hello world&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">uni.<span class="hljs-title function_">postMessage</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: message</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"><span class="hljs-comment">//自定义按钮数据发送</span></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;postData&quot;</span>)</span><br><span class="language-javascript">btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">uni.<span class="hljs-title function_">postMessage</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">action</span>: <span class="hljs-string">&quot;Hello, webview!&quot;</span>, <span class="hljs-comment">// 这是传的参数</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"><span class="hljs-comment">//接收vue组件的数据</span></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">getData</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">msgList</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;接收vue组件传递来的数据：&#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(msgList));</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>总结一下，使用webview组件时，我们可以利用evalJS方法和postMessage方法，来实现vue页面和webview之间的双向数据交换。这样，我们就可以在uniapp中灵活地使用webview组件，来加载一些本地或远程的网页，并与它们进行通信,如果需要的就是全屏加载webview，那就不必使用本文的方法了，webview组件使用更方便一些，但是如果你需要更复杂的交互，还是自建webview更合理一些。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uniapp</tag>
      
      <tag>webview</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星穹铁道PC端优化建议</title>
    <link href="/2023/05/02/26/"/>
    <url>/2023/05/02/26/</url>
    
    <content type="html"><![CDATA[<p>星穹铁道是一款令人着迷的游戏，让玩家可以在虚拟世界里打造属于自己的太空歌剧。作为多端网游，星穹铁道有一些在pc端待改进的地方。为了让游戏在电脑端有更好的体验，我有以下三点优化建议：</p><ol><li><p>pc端增加后台帧率设置，比如可以设置到1帧，节约用户电脑cpu和gpu资源占用。这样，当玩家需要切换到其他程序或者最小化游戏窗口时，游戏不会占用过多的系统资源，从而提高电脑的性能和不必要的资源浪费。</p></li><li><p>pc端增加后台声音音量调节选项，实现后台静音。有时候，玩家可能需要在游戏中暂停或者离开一会儿，此时，游戏的声音可能会干扰到其他程序，比如我刷b站的时候，游戏的背景音乐就很吵，如果能够在设置中调节后台声音的大小，或者直接静音，那么就可以避免这种情况。</p></li><li><p>pc端退出游戏直接关闭游戏，当前是先退出到登录页面，再退出整个程序。这样做的目的可能是为了方便玩家重新登录或者切换账号，但是也增加了玩家的操作步骤和等待时间。绝大部分玩家点退出都是为了完整退出游戏，而不是切换帐号，建议把退出游戏和切换帐号做成弹窗的两个按钮，让玩家自由选择。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>星穹铁道</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx反向代理的妙用</title>
    <link href="/2023/04/12/25/"/>
    <url>/2023/04/12/25/</url>
    
    <content type="html"><![CDATA[<h2 id="不止可以反向代理-还能自定义修改内容"><a href="#不止可以反向代理-还能自定义修改内容" class="headerlink" title="不止可以反向代理,还能自定义修改内容"></a>不止可以反向代理,还能自定义修改内容</h2><p>Nginx是一个高性能的HTTP服务器，它可以实现反向代理的功能，即将客户端的请求转发到后端的服务器，并将后端服务器的响应返回给客户端。这样可以实现负载均衡、安全防护、缓存加速等目的。但是，有时候我们不仅仅想要转发请求和响应，还想要对目标网站的内容进行一些自定义的修改，比如替换某些字符串、添加或删除某些标签、修改某些链接等。这种情况下，我们就需要使用Nginx的内容替换模块，即ngx_http_sub_module模块。</p><p>ngx_http_sub_module模块是一个过滤器，它可以修改网站响应内容中的字符串。这个模块已经内置在Nginx中，但是默认未安装，需要安装需要加上配置参数：–with-http_sub_module。如果已经安装Nginx,只需要再添加这个模块就可以了。安装完成后，我们就可以在Nginx的配置文件中使用sub_filter指令来设置需要替换的字符串和新的字符串。例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> www.example.com;<br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080;<br>        <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>        <span class="hljs-attribute">sub_filter</span> <span class="hljs-string">&#x27;原内容&#x27;</span> <span class="hljs-string">&#x27;替换成的内容&#x27;</span>;<br>        <span class="hljs-attribute">sub_filter_once</span> <span class="hljs-literal">on</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，当我们访问 <a href="http://www.example.com/">www.example.com</a> 时，Nginx会将请求转发到127.0.0.1:8080，并将响应内容中的’原内容’替换成’替换成的内容’，然后返回给客户端。注意，sub_filter_once指令表示只替换第一次匹配到的字符串，如果想要替换所有匹配到的字符串，可以设置为off。</p><h2 id="三个实例"><a href="#三个实例" class="headerlink" title="三个实例"></a>三个实例</h2><p>使用Nginx进行反向代理后自定义修改目标网站内容的用处有很多，例如：</p><ul><li>可以实现网页内容定制化，根据不同的客户端或用户需求，显示不同的内容或样式。</li><li>可以实现网页内容优化，比如去除一些无用的标签或注释，减少网页大小和加载时间。</li><li>可以实现网页内容安全化，比如过滤掉一些恶意的脚本或链接，防止网页被篡改或劫持(ps:替换原网站内容在某种情况下已经可以算是篡改了吧)。</li><li>可以实现网页内容扩展化，比如添加一些额外的内容。</li></ul><p>下面是三段示例代码,由简到难使用了Nginx反向代理后自定义内容的功能。<br>1.第一段代码是给原有的网页注入了一段本地js;<br>2.第二段反向代理某网站后,会在原网站的登录页注入一个js脚本,实现了对element输入框的自动登录效果;<br>3.第三段代码是局域网服务器无法访问高德api时,在有公网权限的服务器上使用Nginx反向代理高德api后,将原有js中的地址替换成本地代理的地址;<em><a href="https://blog.csdn.net/cbb0201/article/details/111143619">点击跳转至原作者网站</a></em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">server &#123;<br>    listen 80;<br>    server_name www.example.com;<br>    location / &#123;<br>        proxy_pass http://127.0.0.1:8080;<br>        proxy_redirect off;<br>        sub_filter &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/app.skd78945.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&#x27; &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/app.skd78945.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;本地js执行成功&quot;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&#x27;;<br>        sub_filter_once on;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">server &#123;<br>    listen 80;<br>    server_name www.example.com;<br>    location / &#123;<br>        proxy_pass http://127.0.0.1:8080;<br>        proxy_redirect off;<br>        sub_filter &#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>&#x27; &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-keyword">let</span> name=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;input&#x27;</span>)[<span class="hljs-number">0</span>];name.<span class="hljs-property">value</span>=<span class="hljs-string">&quot;woshiyonghuming&quot;</span>;<span class="hljs-keyword">const</span> event1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createEvent</span>(<span class="hljs-string">&quot;HTMLEvents&quot;</span>);event1.<span class="hljs-title function_">initEvent</span>(<span class="hljs-string">&quot;input&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);name.<span class="hljs-title function_">dispatchEvent</span>(event1);<span class="hljs-keyword">let</span> pass=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;input&quot;</span>)[<span class="hljs-number">2</span>];pass.<span class="hljs-property">value</span>=woshimima<span class="hljs-string">&#x27;;const event2 = document.createEvent(&quot;HTMLEvents&quot;);event2.initEvent(&quot;input&quot;, false, true);pass.dispatchEvent(event2);document.getElementsByTagName(&quot;button&quot;)[0].click()</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>&#x27;;<br>        sub_filter_once on;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  localhost;<br>    <span class="hljs-comment">#add_header Access-Control-Allow-Origin *;</span><br>    <span class="hljs-attribute">add_header</span> Access-Control-Allow-Headers X-Requested-With;<br>    <span class="hljs-attribute">add_header</span> Access-Control-Allow-Methods GET,POST,OPTIONS;<br>    <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span> html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br>    <span class="hljs-section">location</span> /restapi/ &#123;<br>            <span class="hljs-attribute">proxy_pass</span> https://restapi.amap.com/;<br>    &#125;<br>    <span class="hljs-section">location</span> /webapi/ &#123;<br>            <span class="hljs-attribute">proxy_pass</span> https://webapi.amap.com/;<br>    &#125;<br>    <span class="hljs-section">location</span> /vdata/ &#123;<br>            <span class="hljs-attribute">proxy_pass</span> https://vdata.amap.com/;<br>    &#125;<br>    <span class="hljs-section">location</span> /wprd01/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   https://wprd01.is.autonavi.com/;<br>    &#125;<br>    <span class="hljs-section">location</span> /wprd02/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   https://wprd02.is.autonavi.com/;<br>    &#125;<br>    <span class="hljs-section">location</span> /wprd03/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   https://wprd03.is.autonavi.com/;<br>    &#125;<br>    <span class="hljs-section">location</span> /wprd04/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   https://wprd04.is.autonavi.com/;<br>    &#125;<br>    <span class="hljs-section">location</span> /webrd01/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   https://webrd01.is.autonavi.com/;<br>    &#125;<br>    <span class="hljs-section">location</span> /webrd02/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   https://webrd02.is.autonavi.com/;<br>    &#125;<br>    <span class="hljs-section">location</span> /webrd03/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   https://webrd03.is.autonavi.com/;<br>    &#125;<br>    <span class="hljs-section">location</span> /webrd04/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   https://webrd04.is.autonavi.com/;<br>    &#125;<br>    <span class="hljs-section">location</span> /style_icon/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span>   http://vdata.amap.com/style_icon/;<br>    &#125;<br>    <span class="hljs-comment">#代理获取js api文件并修改文件内容</span><br>    <span class="hljs-section">location</span> /maps &#123;<br>        <span class="hljs-attribute">proxy_set_header</span> Accept-Encoding <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-attribute">proxy_pass</span> https://webapi.amap.com/maps;<br>        <span class="hljs-attribute">sub_filter_types</span> *;<span class="hljs-comment">#重要·对所有请求响应类型都进行替换</span><br>        <span class="hljs-attribute">sub_filter_once</span> <span class="hljs-literal">off</span>;<br>        <span class="hljs-attribute">sub_filter</span> <span class="hljs-string">&#x27;http://webapi.amap.com&#x27;</span> <span class="hljs-string">&#x27;http://代理服务器ip/webapi&#x27;</span>;<br>        <span class="hljs-attribute">sub_filter</span> <span class="hljs-string">&#x27;https://webapi.amap.com&#x27;</span> <span class="hljs-string">&#x27;http://代理服务器ip/webapi&#x27;</span>;<br>        <span class="hljs-attribute">sub_filter</span> <span class="hljs-string">&#x27;http://restapi.amap.com&#x27;</span> <span class="hljs-string">&#x27;http://代理服务器ip/restapi&#x27;</span>;<br>        <span class="hljs-attribute">sub_filter</span> <span class="hljs-string">&#x27;http://vdata.amap.com&#x27;</span> <span class="hljs-string">&#x27;http://代理服务器ip/vdata&#x27;</span>;<br>        <span class="hljs-attribute">sub_filter</span> <span class="hljs-string">&#x27;vdata.amap.com&#x27;</span> <span class="hljs-string">&#x27;代理服务器ip/vdata&#x27;</span>;<br>        <span class="hljs-attribute">sub_filter</span> <span class="hljs-string">&#x27;webapi.amap.com/count&#x27;</span> <span class="hljs-string">&#x27;代理服务器ip/webapi/count&#x27;</span>;<br>        <span class="hljs-attribute">sub_filter</span> <span class="hljs-string">&#x27;wprd0&#123;1,2,3,4&#125;.is.autonavi.com&#x27;</span> <span class="hljs-string">&#x27;代理服务器ip/wprd0&#123;1,2,3,4&#125;&#x27;</span>;<br>        <span class="hljs-attribute">sub_filter</span> <span class="hljs-string">&#x27;webapi.amap.com/theme&#x27;</span> <span class="hljs-string">&#x27;代理服务器ip/webapi/theme&#x27;</span>;<br>        <span class="hljs-attribute">sub_filter</span> <span class="hljs-string">&#x27;restapi.amap.com/v4&#x27;</span> <span class="hljs-string">&#x27;代理服务器ip/restapi/v4&#x27;</span>;<br>        <span class="hljs-attribute">sub_filter</span> <span class="hljs-string">&#x27;webapi.amap.com/style&#x27;</span> <span class="hljs-string">&#x27;代理服务器ip/webapi/style&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>碳循环无痛瘦身大法</title>
    <link href="/2023/02/12/24/"/>
    <url>/2023/02/12/24/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>减肥最痛苦的就是运动，本文分享一种不用辛苦锻炼也能减肥的方法，由减肥教父“肚肚子”收集自互联网，<span  style="color: #be6722; ">肚肚子亲身体验，4个月瘦20斤。</span><br><img src="/img/24/1.webp" alt="碳循环"> </p><h2 id="碳⽔循环法"><a href="#碳⽔循环法" class="headerlink" title="碳⽔循环法"></a>碳⽔循环法</h2><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><p>四天⼀周期，三天低碳，⼀天⾼碳。减肥原理为在经历了连续三天的低碳后，身体会进去优先利⽤顽固脂肪的“微酮症”阶段。低碳阶段，不能使身体的糖原完全耗尽，不然肌⾁就会被迫分解供能，造成肌⾁流失。前三天为低碳或者中碳阶段，第四天⾼碳，让身体保持⼀个⾼的健康的代谢率。<br>成年男性可以这样做：</p><ol><li>第⼀天：100g碳⽔，50g脂肪</li><li>第⼆天：200g碳⽔，25g脂肪</li><li>第三天：200g碳⽔，25g脂肪</li><li>第四天：400g碳⽔，0g脂肪<br>成年女性可以这样做：<br>⼀般男性摄⼊100g但⼥性只需要25g，中碳可以增加到75g，⾼碳可以增加到150-200g。</li><li>第1天：碳⽔25g，搭配脂肪50g</li><li>第2天，碳⽔25g，搭配脂肪25g</li><li>第3天，碳⽔25g，搭配脂肪25g</li><li>第4天，⾼碳100g碳⽔，0脂肪</li></ol><h3 id="食谱推荐"><a href="#食谱推荐" class="headerlink" title="食谱推荐"></a>食谱推荐</h3><p>高碳日推荐早饭:2个肉包,午饭:牛肉150g+蔬菜+杂粮饭100g,晚饭:鸡胸肉200g+蔬菜+杂粮饭100g<br>中碳日推荐早饭:2个鸡蛋+10个圣女果,午饭:白灼虾100g+蔬菜+杂粮饭100g,晚饭:鸡胸肉200g+蔬菜+荞麦面100g<br>低碳日推荐早饭:3个鸡蛋,午饭:鸡胸肉100g+牛肉100g+蔬菜+100g贝贝南瓜,晚饭:鸡胸肉丸汤<br>推荐食物：<br>蛋白质：鸡肉，牛肉，鱼肉，虾蟹，贝壳类，蛋类<br>脂肪：橄榄油，坚果，椰子油，牛油果<br>蔬菜：菠菜，生菜，茼蒿，青菜，西兰花，番茄，黄瓜…<br>水果：苹果，香蕉，草莓，橙子，柚子，圣女果，蓝莓，猕猴桃<br>以上为肚肚子亲身鉴定有效的推荐食谱，我们的原则是保证碳水摄入具体吃什么可以找自己爱吃的搭配就行，可以下载薄荷健康等健康app查热量。</p><h3 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h3><p>美国 william D.Brink博⼠发明的碳⽔循环法，可以让你在减少脂肪的同时最⼤限度地保持瘦体重。⾸先谈⻝物来源。你需要戒掉任何诸如⻨当劳肯德基之类的油炸⻝品，不沾任何糖果，巧克⼒，任何⽩⽶⽩⾯。所有的碳⽔化合物只能来⾃蔬菜，少量的低糖⽔果（如草莓，⻄柚，樱桃）和复合碳⽔化合物（糙⽶，燕⻨，全⻨制品）。<br>具体做法是：4天作为⼀个循环，前三天每⽄体重只摄⼊0.8克碳⽔化合物，平均的分配到前五餐中（最后睡前加餐不吃碳⽔），另外需要⾼达 1.5克的蛋⽩质和0.5克脂肪。碳⽔必须是复合碳⽔。蛋⽩质要选择⾼BV(biology value,⽣物学价值)的制品，⽐如分离乳清蛋⽩，鸡胸 ⾁，鸡蛋⽩，瘦⽜⾁，深海⻥。植物蛋⽩⽐如⼤⾖蛋⽩对修复肌⾁组织的意义并不⼤。可以选择的⻝⽤油只能是橄榄油（主要成分欧⽶加-9）和亚麻籽油深海⻥ 油，并且要以后者为主, 因为亚麻籽油⻥油中含有最丰富的欧⽶加-3必须脂肪酸，⽽这种脂肪酸可以加速⼈体⾃身的脂肪分解代谢。花⽣也是不错的来源。<br>所以假如你体重150⽄，⼀天就需要摄⼊120克复合碳⽔，225克⾼质量的蛋⽩质和75克健康脂肪。到第四天，加⼤碳⽔摄⼊量（每⽄体重3克），蛋⽩质每⽄体重减少到1克，脂肪不变。这样可以让你的身体解除碳⽔缺乏状态，加速已经放缓的新陈代谢，从⽽在减脂的同时减少瘦体重损失。<br>如此循环，根据体重的变化不停地调整你的摄⼊量，直到达到⽬标。另外上⽂提到的0.8,1.5,0.5这些数字也只是作为参考，个⼈的情况不同，如果你发现这样的饮⻝结构减脂<br>效果还不理想可以进⼀步降低碳⽔化合物的⽐例。总之减脂⽅案的核⼼就是⾼蛋⽩，低碳⽔，适度的有益脂肪。<br>不能忽略了⾃⼰总代谢这个关键，吃多少怎么吃是和总代谢挂钩的，只要不超过⽇常代谢，如何安排是自己的问题。低碳⽔⾼蛋⽩是所有运动员都会使⽤降低脂肪保持肌⾁的⼀种基础饮⻝法，，减脂都是阶段性的事，没有谁会⼀直这么吃，⼀个⼈花了3年的时间把⾃⼰吃成个胖⼦，却想只⽤半年甚⾄更短的时间内瘦回来本身就是⽩⽇梦，身体⽆论如何都⽆法完成这么⼤的变化，强⾏的结局只能是以健康为代价。</p><h2 id="瘦身戒律"><a href="#瘦身戒律" class="headerlink" title="瘦身戒律"></a>瘦身戒律</h2><p>戒律一：所有能看得见肥肉的东西都不吃。<br>戒律二：不喝任何酒或者饮料。<br>戒律三：每天吃的植物油不超过可乐瓶盖3瓶盖。<br>戒律四：清理掉家里的所有即食食品，不再买任何新的即食食品。<br>戒律五：每周外出就餐的次数控制在1次以内，外出就餐时不吃主食。<br>戒律六：不吃任何油炸、油煎食物。<br>戒律七：2个月内任何营有小麦（面粉）成分的食物都不吃。<br>戒律八：每天的食物当中要有600克绿绿叶菜。<br>戒律九：只要有条件，晚餐在7点前吃完，且每天晚餐后不可以再进食。</p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碳循环</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决nodejs更新到v18后旧项目报错</title>
    <link href="/2023/02/12/23/"/>
    <url>/2023/02/12/23/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>去年我发现使用的电脑性能太差了，同时开两个项目内存就会爆满，导致各种卡顿及闪退，用起来很不爽，我就自费买了个8g内存，组成16g后内存占用明显缓解了，启动两个项目基本上只占用一半内存。然后我又发现第二个问题：笔记本的温度不对，长期运行待机下，温度能达到90度撞到功耗墙，同时能闻到一股烧硬塑料的味道，摸了一下出风口几乎没有风力，我又自费给笔记本清了一下灰，真是自费上班第一人，维修工程师拆机涂硅脂清灰一气呵成，我看他清理出了大片结块的灰尘，就是这玩意堵住了出风口。清灰后果然好了很多，鲁大师烤机10分钟 温度温度60+度。<br>但是启动项目还是很慢，以及npm i安装新的依赖时偶尔会报错，重新安装能解决。删除依赖包的速度很慢，反正不是一个合格的固态硬盘的速度，硬盘我也不方便换，只能另想办法了。于是就想到之前看新闻说nodejs18更换了最新的v8引擎，性能提升很大，于是就…</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> install <span class="hljs-number">18</span>.<span class="hljs-number">13</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">nvm</span> use <span class="hljs-number">18</span>.<span class="hljs-number">13</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="报错及解决"><a href="#报错及解决" class="headerlink" title="报错及解决"></a>报错及解决</h2><p>安装完最新版本神清气爽，立马npm run dev启动项目，发现报了个错</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sml">&#123;<br>  opensslErrorStack: [ <span class="hljs-symbol">&#x27;error</span>:<span class="hljs-number">03000086</span>:digital envelope routines::initialization error&#x27; ],<br>  library: <span class="hljs-symbol">&#x27;digital</span> envelope routines&#x27;,<br>  reason: <span class="hljs-symbol">&#x27;unsupported&#x27;</span>,<br>  code: <span class="hljs-symbol">&#x27;ERR_OSSL_EVP_UNSUPPORTED&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>搜索引擎搜索后，是nodev17以后的版本都不支持openssl的一个加密算法了，解决方法也很简单 在环境变量-系统变量中添加变量名”NODE_OPTIONS”, 变量值”–openssl-legacy-provider”,重启电脑后再运行旧项目，就可以跳过这个报错正常启动了。<br> <img src="/2023/02/12/23/1.webp" alt="系统变量"> </p><h2 id="我踩过的坑"><a href="#我踩过的坑" class="headerlink" title="我踩过的坑"></a>我踩过的坑</h2><p>一般情况下上个步骤修改环境变量就可以了，但是我添加环境变量始终无效，一直报这个错，不知原因，于是开始了漫长的踩坑之路。首先改为采用另一种解决方法：配置临时变量。<br>即先设置临时变量，再运行项目</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">NODE_OPTIONS</span>=--openssl-legacy-provider<br>npm <span class="hljs-built_in">run</span> dev<br></code></pre></td></tr></table></figure><p>这样也不无法运行项目，改为另一种解决方案：在dev的命令里配置node临时变量并启动项目。<br>即把package.json中的</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">...</span><br><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;vue-cli-service serve&quot;</span>,<br>    <span class="hljs-string">...</span><br>  &#125;,<br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">...</span><br><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;SET NODE_OPTIONS=--openssl-legacy-provider &amp;&amp;vue-cli-service serve&quot;</span>,<br>    <span class="hljs-string">...</span><br>  &#125;,<br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>然后再npm run dev，这样成功运行老项目了，但是！！！多人协作项目我不可能把这玩意提交到仓库去，也不可能每次手动改自己本地的package.json文件，那也太蠢了。绕了一圈又回到最开始，先搞清楚为什么环境变量无效，我一直使用的是vscode的终端，在终端输入</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$env</span><span class="hljs-symbol">:NODE_OPTIONS</span><br></code></pre></td></tr></table></figure><p>打印为空，再输入</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">$env</span>:Path<br><span class="hljs-name">C</span>:\ProgramData\Anaconda3;<span class="hljs-name">C</span>:\ProgramData\Anaconda3\Library\mingw-w64\bin;...<br></code></pre></td></tr></table></figure><p>能打印出这个原来就配好的环境变量Path，打不开NODE_OPTIONS。我又去win10的系统变量里反复确认我添加好了，这就奇怪了，我又打开系统的powershell打印变量，奇迹出现了</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$env</span><span class="hljs-symbol">:NODE_OPTIONS</span><br>--openssl-legacy-provider<br></code></pre></td></tr></table></figure><p>powershell能打印出NODE_OPTIONS，原来是vscode的bug，它没有正确的加载到最新的环境变量，而我一直没有怀疑是vscode的原因，害我排除了这么久的问题，虽然也有一些收获。我猜重新安装vscode能解决这个bug，但我已经不想折腾了，以后只在powershell里npm run dev启动项目就行了，哪天有空再重装vscode吧。对了，升级后性能是有提升，启动项目快了，内存占用也更稳定了。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodeJs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue3的生命周期函数</title>
    <link href="/2023/01/15/22/"/>
    <url>/2023/01/15/22/</url>
    
    <content type="html"><![CDATA[<h2 id="what-is-生命周期函数"><a href="#what-is-生命周期函数" class="headerlink" title="what is 生命周期函数"></a>what is 生命周期函数</h2><p>在生命周期中被自动调用的函数叫做生命周期函数，也被形象地称为钩子函数。<br>那么，设计这些生命周期函数又有什么作用呢？<br>举个现实生活中的例子，比如一个人，我们把他的一生（幼儿、青年、老年、死亡）看作是一个生命周期。<br>那么作为一个社会动物，在他生命中的每个阶段，实际上都有需要完成的任务。<br>比如，在婴幼儿时期他的使命就是快乐成长。青少年时期需要学习大量知识。老年时期就该听秦腔吃有利消化的食物了。<br>与其把 Vue 实例比喻成一个人，不如把它看作是一部小说或电视剧。有了生命周期函数，我们就掌握了整部剧情的走向，而且可以通过生命周期函数，为这部电视剧在某些阶段添加一些必要的情节以满足剧情需要。<br>总结起来就是，Vue 组件实例的生命周期是组件或实例从创建到销毁的过程。生命周期钩子函数就是组件或实例在某个阶段对外开放的一个口子，可以供开发人员通过该入口添加一些对该实例或组件的一些操作，进而起到控制实例或组件发生变化的目的。</p><h2 id="好记性不如烂笔头"><a href="#好记性不如烂笔头" class="headerlink" title="好记性不如烂笔头"></a>好记性不如烂笔头</h2><table><thead><tr><th align="left">生命周期函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="center">组件实例初始化之后，data 初始前，事件配置前被调用。</td></tr><tr><td align="left">created</td><td align="center">data 初始化完成，计算属性、event&#x2F;watch 事件回调，但组件并未挂载到 DOM 树上。</td></tr><tr><td align="left">beforeMount</td><td align="center">组件挂载到真实 DOM 树之前被调用，render 函数首次被调用生成虚拟 DOM。</td></tr><tr><td align="left">mounted</td><td align="center">组件被挂载到真实 DOM 树中时自动调用，DOM 树已经渲染完成，可进行 DOM 操作。</td></tr><tr><td align="left">beforeUpdate</td><td align="center">组数据有更新被调用。</td></tr><tr><td align="left">updated</td><td align="center">数据更新后被调用。</td></tr><tr><td align="left">beforeUnmount</td><td align="center">组件销毁前调用，可以访问组件实例数据。</td></tr><tr><td align="left">unmounted</td><td align="center">组件销毁后调用。</td></tr></tbody></table><p>实际开发中常用的有created、mounted、beforeUnmount。created：已经可以访问并更改 data 中的数据了。不过此时更改 data 中的数据，不会触发 updated 等其它钩子函数，一般可以在这里做初始数据的获取。不过此时仍然不能访问真实的 DOM 元素。<br>mounted：此时，组件已经渲染完成，在页面中已经真实存在了，可以在这里做修改 data 中数据（比如异步请求数据）、访问真实 DOM 等操作。<br>beforeUnmount：经过某种途径调用 unmount() 方法后，会立即执行 beforeUnmount 函数。一般会在这里做一些善后工作，例如清除计时器、清除非指令绑定的事件等等。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue自定义全局指令实现拖拽弹窗等元素</title>
    <link href="/2022/12/30/21/"/>
    <url>/2022/12/30/21/</url>
    
    <content type="html"><![CDATA[<h2 id="全局注册指令"><a href="#全局注册指令" class="headerlink" title="全局注册指令"></a>全局注册指令</h2><p>注意：bind是vue2的自定义指令事件，如果你在vue3中使用请把bind改为beforeMount，附上vue2指令的生命周期函数和vue3的对比。</p><table><thead><tr><th align="left">vue2</th><th align="center">vue3</th><th align="right">备注</th></tr></thead><tbody><tr><td align="left">bind</td><td align="center">beforeMount</td><td align="right">指令绑定到元素后执行。只执行一次。</td></tr><tr><td align="left">inserted</td><td align="center">mounted</td><td align="right">元素插入父 DOM 后执行</td></tr><tr><td align="left">-</td><td align="center">beforeUpdate</td><td align="right">元素本身更新之前执行</td></tr><tr><td align="left">componentUpdated</td><td align="center">updated</td><td align="right">组件和子级更新后执行</td></tr><tr><td align="left">-</td><td align="center">beforeUnmount</td><td align="right">卸载元素之前执行</td></tr><tr><td align="left">unbind</td><td align="center">unmounted</td><td align="right">指令被移除，就会执行，也只执行一次</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;move&#x27;</span>, &#123;<br>  <span class="hljs-title function_">bind</span>(<span class="hljs-params">el</span>) &#123;<br>    <br>      <span class="hljs-keyword">let</span> moveElement = el.<span class="hljs-property">firstElementChild</span>;<br>      el.<span class="hljs-property">mouseDown</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <br>          <span class="hljs-comment">// X,Y为计算的偏移量，就是鼠标点击的位置相对于元素左上角圆点的距离</span><br>          <span class="hljs-keyword">let</span> X = e.<span class="hljs-property">clientX</span> - el.<span class="hljs-property">offsetLeft</span>;<br>          <span class="hljs-keyword">let</span> Y = e.<span class="hljs-property">clientY</span> - el.<span class="hljs-property">offsetTop</span>;<br>          <span class="hljs-keyword">const</span> <span class="hljs-title function_">move</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>              <span class="hljs-comment">// 0 &lt; left &amp;&amp; left &lt; window.innerWidth - el.offsetWidth 保证移动过程中，元素不超出窗口</span><br>              <span class="hljs-keyword">let</span> left = e.<span class="hljs-property">clientX</span> - X;<br>              <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt; left &amp;&amp; left &lt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> - el.<span class="hljs-property">offsetWidth</span>) &#123;<br>              el.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = left + <span class="hljs-string">&#x27;px&#x27;</span>;<br>              &#125;<br>              <span class="hljs-comment">// console.log(left, window.innerWidth, el.offsetWidth)</span><br><br>              <span class="hljs-comment">// 0 &lt; top &amp;&amp; top &lt; window.innerHeight - el.offsetHeight 保证移动过程中，元素不超出窗口</span><br>              <span class="hljs-keyword">let</span> top = e.<span class="hljs-property">clientY</span> - Y;<br>              <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt; top &amp;&amp; top &lt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> - el.<span class="hljs-property">offsetHeight</span>) &#123;<br>              el.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = top + <span class="hljs-string">&#x27;px&#x27;</span>;<br>              &#125;<br>              <span class="hljs-comment">// console.log(top, window.innerHeight, el.offsetHeight)</span><br>          &#125;<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, move)<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>              <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, move)<br>          &#125;)<br>      &#125;<br>      moveElement.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousedown&#x27;</span>, el.<span class="hljs-property">mouseDown</span>);<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div v-move&gt;</span> <span class="hljs-section">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><h2 id="优化空间"><a href="#优化空间" class="headerlink" title="优化空间"></a>优化空间</h2><p> 指令来源于互联网，感觉还有优化的空间，例如<br> 1.目前是默认指定元素的第一个子元素为绑定拖拽事件的元素，一般为弹窗的title区。可以再加一个参数v-mode&#x3D;”#title”来自定义绑定拖拽事件的元素。<br> 2.目前弹窗关闭后再次打开，上次拖拽添加的”top”和”left”还在，会导致弹窗不能恢复到默认位置，只能在弹窗关闭的事件里再额外执行this.$refs[“绑定指令的弹窗元素”].style.cssText &#x3D; ‘display: none;’，使用起来比较麻烦，最好能在指令里能监听元素状态是否为’display: none;’，如果是none隐藏状态，就删除元素style中的”top”和”left”</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用web phsh为网站增添色彩</title>
    <link href="/2022/12/03/20/"/>
    <url>/2022/12/03/20/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是web-phsh"><a href="#什么是web-phsh" class="headerlink" title="什么是web phsh"></a>什么是web phsh</h2><p> web phsh是标准的web api，当网站具有激活的Service worker，并且在访客授权通知权限的情况下，就可以向用户推送信息。后期不需要打开网站只要浏览器进程存在就把推送消息触发用户，让用户更及时的获得新内容。一些理想的应用场景，比如 购物网站向用户推送订单信息 物流信息，或者是监测平台向用户紧急通报危险情况等，都可以做到比较棒的实现。</p><h2 id="hexo使用web-phsh实现文章更新后推送给访客"><a href="#hexo使用web-phsh实现文章更新后推送给访客" class="headerlink" title="hexo使用web phsh实现文章更新后推送给访客"></a>hexo使用web phsh实现文章更新后推送给访客</h2><p> 传统的实现web phsh应该是具有后端服务器的网站，开启Service worker后再配置消息推送的相关功能，但是借助于 <a href="https://www.webpushr.com/">webpushr</a> 等网站，可以提供第三方的service worker，从而使得静态网站也可以拥有花样百出的推送。再借助于大神写好的推送代码 我们不需要关心消息推送的具体实现代码而只是按部就班的跟着教程配置就可以很简单的实现hexo静态博客的消息推送服务。<br> 具体的使用方法可以参考大神的仓库<a href="https://github.com/Rock-Candy-Tea/hexo-webpushr-notification">hexo-webpushr-notification</a><br> <img src="/2022/12/03/20/webpush%E6%88%90%E5%8A%9F.webp" alt="webpush成功"><br> 如果你在使用中有什么问题也欢迎你留言评论，我会在第一时间回复。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webPush</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用GitHub Action分布式部署静态网站</title>
    <link href="/2022/10/27/19/"/>
    <url>/2022/10/27/19/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是GitHub-Action"><a href="#什么是GitHub-Action" class="headerlink" title="什么是GitHub Action"></a>什么是GitHub Action</h2><p>通俗的理解GitHub Action是通过push代码等方式自动触发运行用户提前编写好的工作流脚本，这些脚本会运行在GitHub提供的虚拟机中，虚拟机会像机器人流水线作业一样一步一步来完成这些复杂频繁的的工作流程，解放人力。</p><h2 id="分布式部署网站"><a href="#分布式部署网站" class="headerlink" title="分布式部署网站"></a>分布式部署网站</h2><p>目前我使用的网站结构在两个git仓库使用了两个GitHub Action流程，如下流程图所示：每次push博客生成器源码git仓库后，执行GitHub Action工作流程，将编译好的网站html源码push到另一个存放网站html代码的git仓库以及gitee备用仓库。存放html源码的仓库在收到push后又会触发自己仓库的GitHub Action，把html代码上传到阿里云oss中。</p><pre><code class="mermaid" >graph TB    A[本地书写文章] -- 主动推送 --> B[(github-hexo静态网页生成器源码仓库)];    B -- GitHub Action one --> C[(github-html代码仓库)];    B -- GitHub Action one --> D[(gitee-html代码备用仓库)];    C -- GitHub Action two --> E[(阿里云OSS)];    </code></pre><p>看起来有些繁琐但是人工参与的只有第一步向仓库push代码，剩下的步骤都由勤劳的GitHub Action来自动集成。网站访客在访问域名后，dns会根据访客ip智能把请求到最佳节点。”github-html代码仓库”开启了git pages用于国外访客的域名解析,阿里云OSS用于国内ip的访客使用,并且使用了cdn访问速度飞快。gitee备用仓库由于监管原因不能绑定自定义域名暂无使用只是用于备份存储，整个访问流程如下所示。</p><pre><code class="mermaid" >graph LR    A[网站访客] --> B{dns判断访客IP?};    B -- 是国内访问,解析至 --> C[阿里云cdn];    C -.-> D[阿里云OSS];    B -- 否,国外访问,解析至 ---> E[gitPages网页托管];</code></pre><h2 id="GitHub-Action代码"><a href="#GitHub-Action代码" class="headerlink" title="GitHub Action代码"></a>GitHub Action代码</h2><p>上面这些繁琐的工作都是靠下面两个GitHub Action实现</p><h3 id="博客生成器仓库的GitHub-Action-one"><a href="#博客生成器仓库的GitHub-Action-one" class="headerlink" title="博客生成器仓库的GitHub Action one"></a>博客生成器仓库的GitHub Action one</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Action 的名字</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Auto</span> <span class="hljs-string">Deploy</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-comment"># 触发条件1：main 分支收到 push 后执行任务。</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-comment"># 触发条件2：手动按钮</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><span class="hljs-comment"># 这里放环境变量,需要替换成你自己的</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-comment"># Hexo 编译后使用此 git 用户部署到 github 仓库</span><br>  <span class="hljs-attr">GIT_USER:</span> <span class="hljs-string">xiyuvi</span><br>  <span class="hljs-comment"># Hexo 编译后使用此 git 邮箱部署到 github 仓库</span><br>  <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-number">20702001</span><span class="hljs-string">@qq.com</span><br>  <span class="hljs-comment"># Hexo 编译后要部署的 github 仓库</span><br>  <span class="hljs-attr">GIT_DEPLOY_REPO:</span> <span class="hljs-string">xiyuvi/xiyuvi.github.io</span><br>  <span class="hljs-comment"># Hexo 编译后要部署到的分支</span><br>  <span class="hljs-attr">GIT_DEPLOY_BRANCH:</span> <span class="hljs-string">main</span><br>  <span class="hljs-comment"># Hexo 编译后使用此 gitee 用户部署到gitee仓库</span><br>  <span class="hljs-attr">GITEE_USER:</span> <span class="hljs-string">xiyu</span><br>  <span class="hljs-comment"># Hexo 编译后要部署的 gitee 仓库</span><br>  <span class="hljs-attr">GITEE_DEPLOY_REPO:</span> <span class="hljs-string">xiyu/bloghtml</span><br>  <span class="hljs-comment"># Hexo 编译后要部署到的分支</span><br>  <span class="hljs-attr">GITEE_DEPLOY_BRANCH:</span> <span class="hljs-string">main</span><br>  <span class="hljs-comment"># 注意替换为你的 GitHub 源仓库地址</span><br>  <span class="hljs-attr">GIT_SOURCE_REPO:</span> <span class="hljs-string">git@github.com:xiyuvi/xiyuvi.github.io.git</span><br>  <span class="hljs-comment"># 注意替换为你的 Gitee 目标仓库地址</span><br>  <span class="hljs-attr">GITEE_DESTINATION_REPO:</span> <span class="hljs-string">git@gitee.com:xiyu/bloghtml.git</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">on</span> <span class="hljs-string">node</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">and</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.os</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">github.event.repository.owner.id</span> <span class="hljs-string">==</span> <span class="hljs-string">github.event.sender.id</span><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">os:</span> [<span class="hljs-string">ubuntu-18.04</span>]<br>        <span class="hljs-attr">node_version:</span> [<span class="hljs-number">12.</span><span class="hljs-string">x</span>]<br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">deploy</span> <span class="hljs-string">repo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">repository:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.GIT_DEPLOY_REPO</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.GIT_DEPLOY_BRANCH</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">.deploy_git</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Configuration</span> <span class="hljs-string">environment</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">HEXO_DEPLOY_PRI:</span> <span class="hljs-string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span><br><span class="hljs-string">          mkdir -p ~/.ssh/</span><br><span class="hljs-string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">          chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">          ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">          # coding 已取消同步</span><br><span class="hljs-string">          ssh-keyscan -t rsa e.coding.net &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">          ssh-keyscan -t rsa gitee.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">          git config --global user.name $GIT_USER</span><br><span class="hljs-string">          git config --global user.email $GIT_EMAIL</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install hexo-cli -g</span><br><span class="hljs-string">          npm install</span><br><span class="hljs-string">          # 根据你安装的组件进行安装</span><br><span class="hljs-string">          # npm uninstall hexo-generator-index --save</span><br><span class="hljs-string">          # npm install hexo-baidu-url-submit hexo-generator-index2 hexo-symbols-count-time hexo-blog-encrypt hexo-deployer-git --save</span><br><span class="hljs-string">          # 复制中文语言包，解决菜单英文的问题</span><br><span class="hljs-string">          # cp zh-CN.yml node_modules/hexo-theme-next/languages/</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm run deploy</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Sync</span> <span class="hljs-string">to</span> <span class="hljs-string">Gitee</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">wearerequired/git-mirror-action@master</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-comment"># 直接使用了 HEXO_DEPLOY_PRI</span><br>          <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_PRI</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-comment"># GitHub 源仓库地址</span><br>          <span class="hljs-attr">source-repo:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.GIT_SOURCE_REPO</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># Gitee 目标仓库地址</span><br>          <span class="hljs-attr">destination-repo:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.GITEE_DESTINATION_REPO</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-comment"># - name: Build Gitee Pages</span><br>        <span class="hljs-comment"># uses: yanglbme/gitee-pages-action@main</span><br>        <span class="hljs-comment"># with:</span><br>          <span class="hljs-comment"># 你的 Gitee 用户名</span><br>          <span class="hljs-comment"># gitee-username: $&#123;&#123; env.GITEE_USER &#125;&#125;</span><br>          <span class="hljs-comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span><br>          <span class="hljs-comment"># gitee-password: $&#123;&#123; secrets.GITEE_PASSWORD &#125;&#125;</span><br>          <span class="hljs-comment"># 你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span><br>          <span class="hljs-comment"># gitee-repo: $&#123;&#123; env.GITEE_DEPLOY_REPO &#125;&#125;</span><br>          <span class="hljs-comment"># 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span><br>          <span class="hljs-comment"># branch: $&#123;&#123; env.GITEE_DEPLOY_BRANCH &#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="html代码仓库的GitHub-Action-two"><a href="#html代码仓库的GitHub-Action-two" class="headerlink" title="html代码仓库的GitHub Action two"></a>html代码仓库的GitHub Action two</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">ossWorkflow</span><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]<br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;12.x&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Blog</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm install </span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">manyuanrong/setup-ossutil@master</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-comment"># endpoint 可以去oss控制台上查看</span><br>        <span class="hljs-attr">endpoint:</span> <span class="hljs-string">&quot;oss-cn-chengdu.aliyuncs.com&quot;</span><br>        <span class="hljs-comment"># 使用我们之前配置在secrets里面的accesskeys来配置ossutil</span><br>        <span class="hljs-attr">access-key-id:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">access-key-secret:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SECRET</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deply</span> <span class="hljs-string">To</span> <span class="hljs-string">OSS</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        cp -ri  ./   ../output</span><br><span class="hljs-string">        cd ../output</span><br><span class="hljs-string">        rm -rf .git .github</span><br><span class="hljs-string">        ossutil cp ./ oss://xiyublog/ -rf</span><br></code></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>GitHub Action还能用来做更多可以自动集成化的事情，希望大家都能挖掘出更多有意义的用法 。 </p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>魔方口诀</title>
    <link href="/2022/06/04/17/"/>
    <url>/2022/06/04/17/</url>
    
    <content type="html"><![CDATA[<p>第二层：上右下右逆左顺（棱块顶层颜色和中心颜色一样用公式两遍，棱快边色和中心颜色一样先左转，再用公式一遍）</p><p>顶层黄十字：顺上左下右逆</p><p>顶层黄全部：上左下左 上左左下</p><p>侧两角：上、后顺、上、顺、顺、下、后逆、上、顺、顺、上、上</p><p>最后一步：整面在后 上右上左、上左上右、下右下下<br><img src="/img/17/1.png" alt="魔方口诀">  </p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>魔方</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何低价及免费让网站支持ipv6</title>
    <link href="/2022/03/15/16/"/>
    <url>/2022/03/15/16/</url>
    
    <content type="html"><![CDATA[<h2 id="ipv6国内奇怪的现状"><a href="#ipv6国内奇怪的现状" class="headerlink" title="ipv6国内奇怪的现状"></a>ipv6国内奇怪的现状</h2><p>ipv6是新一代的互联网协议，用它来取代IPv4主要是为了解决IPv4地址枯竭问题，同时它也在其他方面相对IPv4也有许多改进。ipv6在我国的发展官方支持度还不错，网信办在“十四五ipv6规划”提出了2023年ipv6活跃用户数7亿、80%以上政府网站支持ipv6等指标。<br><img src="/img/16/0.webp" alt="ipv6"><br>奇怪的是尽管ipv6号称可以给地球上的每一个沙子分配地址，并且国外很多云服务商处于成本考虑（相比ipv6来说，ipv4过于昂贵），早已开始售卖纯ipv6云主机，国内云服务器上却把ipv6藏着掖着当宝贝卖。<br>在“80%以上政府网站支持ipv6”等硬性要求下出现了一些略显奇怪的服务，例如下图，最便宜的套餐为600元&#x2F;每月，网站明确写着：“可满足《政府网站IPv6改造核验标准》”，产品的受众也就不言而喻了。而提供的服务竟然是可怜的2m公网带宽，对比之下，阿里云等云厂商提供的ipv6-1m带宽30天28.8元的价格都显得格外良心。<br><img src="/2022/03/15/16/1.webp" alt="ipv6转化"> </p><h2 id="现阶段相对低价及免费获取ipv6的方法"><a href="#现阶段相对低价及免费获取ipv6的方法" class="headerlink" title="现阶段相对低价及免费获取ipv6的方法"></a>现阶段相对低价及免费获取ipv6的方法</h2><p>第一种，购买云厂商的ipv6公网带宽，拿阿里云举例，假如你已经拥有一台云主机，那么只需要设置好免费的ipv6网关，以平均每1M带宽 28.8元的价格购买ipv6公网带宽，按照系统的不同在服务器输入不同的脚本命令，就可以获得一台支持ipv6的云主机，下图为阿里云ipv6费用。<br><img src="/2022/03/15/16/2.webp" alt="阿里云ipv6"><br>第二种，购买cdn厂商的cdn服务，现在很多cdn商 例如 阿里云 腾讯云 百度云 又拍云等基本早已提供ipv6支持。只需要对接好cdn，对网站访客来说，就已经支持了ipv6，至于cdn节点回源到源站是什么协议也就无关紧要了。大多数cdn很贵按流量计费的模式也不适合个人站长使用（恶意刷流量破产警告！），推荐一下免费用户也可支持ipv6的cdn“百度云加速”，免费版就支持ipv6，可以说是相当厚道，即使每天的免费加速流量用尽，所有流量回源到服务器对访客来说也同样支持ipv6。<br>第三种，<a href="http://he.com/">http://he.com/</a> 提供免费的ipv6隧道服务，简单来说就是申请ipv6隧道以后，将自己的域名AAAA记录指向he.com提供给我们的公网ipv6地址，隧道可以在指向我们服务器的公网ipv4地址，在服务器上输入相应脚本命令就可以支持ipv6。<br><img src="/2022/03/15/16/3.webp" alt="ipv6隧道"> </p><h2 id="总结和展望"><a href="#总结和展望" class="headerlink" title="总结和展望"></a>总结和展望</h2><p>免费获取ipv6的方式两个：“<a href="https://su.baidu.com/">百度云加速</a>” 、 “<a href="he.com">he.com</a> ”，已备案网站推荐使用第一个，未备案网站只能使用第二个。<br>低价获取ipv6的方式：阿里云等支持ipv6公网宽带购买的国内云厂商。不考虑备案的朋友可以购买国外的ipv6主机，价格相比国内更低而且不需要配置购买后就天然具有ipv6地址。或是购买合适的付费cdn。<br>大冤种获取ipv6的方式：某些云服务商提供的专门为了通过核验检查所搭建的“ipv6转换”昂贵服务。<br>上述获取方式发布的时间为2022年3月，有些方式可能会随着时间的推移失效或者改版，但是我相信随着国家的大力支持和厂商之间的竞争在未来的几年内，国内一样可以买到国外那种天然支持ipv6无需二次配置的服务器，价格也会回归到ipv6本应有的价格。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ipv6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用crypto-js实现静态网页数据加密</title>
    <link href="/2022/02/27/15/"/>
    <url>/2022/02/27/15/</url>
    
    <content type="html"><![CDATA[<h2 id="crypto-js是什么"><a href="#crypto-js是什么" class="headerlink" title="crypto-js是什么"></a>crypto-js是什么</h2><p>使用crypto-js也是很久之前的事了，一直都没有好好整理，今天借助博客重构的机会，好好捋一下。crypto-js是一个加密算法库，支持哈希算法，如：MD5、SHA-1、SHA-2、SHA-3、RIPEMD-160也支持多种加密方式，如：AES、DES, Triple DES、Rabbit、RC4, RC4Drop。可实现多种多样的加密算法。<br><img src="/img/15/0.webp" alt="利用crypto-js实现静态网页数据加密"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在<a href="https://github.com/brix/crypto-js">github.com&#x2F;brix&#x2F;crypto-js</a> 上引入相关文件，因为我只需要使用aes加密算法，所以没有引入整个库而是只下载了aes.js单个文件。<br>借助强大的crypto-js，我们只需要几行代码就可以实现加密效果，下面是一个使用aes加密的demo，效果为在页面加密字符串“123456”，并解密加密的密文。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;script src=&quot;./aes.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;script&gt;<br>        //aes加密<br>        <span class="hljs-keyword">function</span> encrypt(word) &#123;<br>            var key = CryptoJS.enc.Utf8.parse(&quot;1234560000000000&quot;); //<span class="hljs-number">16</span>位<br>            var iv = CryptoJS.enc.Utf8.parse(&quot;1234567890000000&quot;);<br>            var <span class="hljs-keyword">encrypted</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (typeof (word) == <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>                var srcs = CryptoJS.enc.Utf8.parse(word);<br>                <span class="hljs-keyword">encrypted</span> = CryptoJS.AES.encrypt(srcs, key, &#123;<br>                    iv: iv,<br>                    mode: CryptoJS.mode.CBC,<br>                    padding: CryptoJS.pad.Pkcs7<br>                &#125;);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeof (word) == <span class="hljs-string">&#x27;object&#x27;</span>) &#123; //对象格式的转成<span class="hljs-type">json</span>字符串<br>                data = <span class="hljs-type">JSON</span>.stringify(word);<br>                var srcs = CryptoJS.enc.Utf8.parse(data);<br>                <span class="hljs-keyword">encrypted</span> = CryptoJS.AES.encrypt(srcs, key, &#123;<br>                    iv: iv,<br>                    mode: CryptoJS.mode.CBC,<br>                    padding: CryptoJS.pad.Pkcs7<br>                &#125;)<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">encrypted</span>.ciphertext.toString();<br>        &#125;<br>        // aes解密<br>        <span class="hljs-keyword">function</span> decrypt(word) &#123;<br>            var key = CryptoJS.enc.Utf8.parse(&quot;1234560000000000&quot;);<br>            var iv = CryptoJS.enc.Utf8.parse(&quot;1234567890000000&quot;);<br>            var encryptedHexStr = CryptoJS.enc.Hex.parse(word);<br>            var srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr);<br>            var decrypt = CryptoJS.AES.decrypt(srcs, key, &#123;<br>                iv: iv,<br>                mode: CryptoJS.mode.CBC,<br>                padding: CryptoJS.pad.Pkcs7<br>            &#125;);<br>            var decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);<br>            <span class="hljs-keyword">return</span> decryptedStr.toString();<br>        &#125;<br>    &lt;/script&gt;<br>    &lt;script&gt;<br>        var str = &quot;123456&quot;;<br>        var <span class="hljs-keyword">encrypted</span> = encrypt(str);<br>        var decrypt1 = decrypt(<span class="hljs-keyword">encrypted</span>.toString());<br>        document.writeln(&quot;aes cbc 加密 解密&quot;);<br>        document.writeln(&quot;&lt;br/&gt;&quot;);<br>        document.writeln(&quot;待加密：&quot; + str);<br>        document.writeln(&quot;&lt;br/&gt;&quot;);<br>        document.writeln(&quot;加密的密文:&quot;.concat(<span class="hljs-keyword">encrypted</span>));<br>        document.writeln(&quot;&lt;br/&gt;&quot;);<br>        document.writeln(&quot;解密密文的结果:&quot; + decrypt1);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>代码效果如下图</p><p><img src="/2022/02/27/15/demo1.webp" alt="demo1"></p><h2 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h2><p>借助crypto-js还可以实现一些很好玩的加密，例如静态页面文章的加密。出于某种原因我的文章“造谣人士生平事”之前就使用了这种加密方式。<br>判断文章标题是“加密”开头后，就引入aes.js文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> postTitleValue = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.post-title&quot;</span>).<span class="hljs-property">innerHTML</span>.<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (postTitleValue.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) === <span class="hljs-string">&quot;加密&quot;</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> oScript = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>);</span><br><span class="language-javascript">            oScript.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;./aes.js&quot;</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(oScript);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入aes.js后添加密钥和密钥偏移量输入框，添加加密解密函数，添加点击事件。默认的密钥和密码偏移量都为”1234560000000000”，但是千万不要使用默认密码和密钥，最方便的做法是使用在线随机数生成工具生成随机密钥和随机密钥偏移量。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//aes加密<br><span class="hljs-keyword">function</span> encrypt(word, keyy, ivv) &#123;<br>    var key = keyy ? CryptoJS.enc.Utf8.parse(keyy) : CryptoJS.enc.Utf8.parse(&quot;1234560000000000&quot;); //<span class="hljs-number">16</span>位<br>    var iv = ivv ? CryptoJS.enc.Utf8.parse(ivv) : CryptoJS.enc.Utf8.parse(&quot;1234567890000000&quot;);<br>    var <span class="hljs-keyword">encrypted</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (typeof (word) == <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>        var srcs = CryptoJS.enc.Utf8.parse(word);<br>        <span class="hljs-keyword">encrypted</span> = CryptoJS.AES.encrypt(srcs, key, &#123;<br>            iv: iv,<br>            mode: CryptoJS.mode.CBC,<br>            padding: CryptoJS.pad.Pkcs7<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeof (word) == <span class="hljs-string">&#x27;object&#x27;</span>) &#123; //对象格式的转成<span class="hljs-type">json</span>字符串<br>        data = <span class="hljs-type">JSON</span>.stringify(word);<br>        var srcs = CryptoJS.enc.Utf8.parse(data);<br>        <span class="hljs-keyword">encrypted</span> = CryptoJS.AES.encrypt(srcs, key, &#123;<br>            iv: iv,<br>            mode: CryptoJS.mode.CBC,<br>            padding: CryptoJS.pad.Pkcs7<br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">encrypted</span>.ciphertext.toString();<br>&#125;<br>// aes解密<br><span class="hljs-keyword">function</span> decrypt(word, keyy, ivv) &#123;<br>    var key = keyy ? CryptoJS.enc.Utf8.parse(keyy) : CryptoJS.enc.Utf8.parse(&quot;1234560000000000&quot;);<br>    var iv = ivv ? CryptoJS.enc.Utf8.parse(ivv) : CryptoJS.enc.Utf8.parse(&quot;1234567890000000&quot;);<br>    var encryptedHexStr = CryptoJS.enc.Hex.parse(word);<br>    var srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr);<br>    var decrypt = CryptoJS.AES.decrypt(srcs, key, &#123;<br>        iv: iv,<br>        mode: CryptoJS.mode.CBC,<br>        padding: CryptoJS.pad.Pkcs7<br>    &#125;);<br>    var decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);<br>    <span class="hljs-keyword">return</span> decryptedStr.toString();<br>&#125;<br>var <span class="hljs-keyword">lock</span> = document.createElement(&quot;div&quot;),<br>    input = document.createElement(&quot;input&quot;),<br>    inputIvv = document.createElement(&quot;input&quot;),<br>    btn1 = document.createElement(&quot;button&quot;),<br>    btn2 = document.createElement(&quot;button&quot;),<br>    markdown = document.querySelector(&quot;.markdown-body&quot;);<br>    markdown.style.display=&quot;none&quot;<br><span class="hljs-keyword">lock</span>.id = &quot;lock&quot;;<br><span class="hljs-keyword">input</span>.id = &quot;lock-input&quot;;<br>inputIvv.id = &quot;lock-inputIvv&quot;;<br><span class="hljs-keyword">input</span>.<span class="hljs-keyword">type</span>=&quot;password&quot;;<br>inputIvv.<span class="hljs-keyword">type</span>=&quot;password&quot;;<br>btn1.id = &quot;lock-btn1&quot;;<br>btn2.id = &quot;lock-btn2&quot;;<br>btn1.innerHTML = &quot;解密&quot;;<br>btn2.innerHTML = &quot;加密&quot;;<br>document.body.appendChild(<span class="hljs-keyword">lock</span>);<br><span class="hljs-keyword">lock</span>.appendChild(<span class="hljs-keyword">input</span>);<br><span class="hljs-keyword">lock</span>.appendChild(inputIvv);<br><span class="hljs-keyword">lock</span>.appendChild(btn1);<br><span class="hljs-keyword">lock</span>.appendChild(btn2);<br><br>btn1.onclick = <span class="hljs-keyword">function</span> () &#123;<br>    var keyy = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>;<br>    var ivv = inputIvv.<span class="hljs-keyword">value</span>;<br>    var markdownValue = markdown.innerHTML.trim();<br>    //去除生成干扰，我的文章每次生成会自动包一层div，这一步是为了保证密文永不改变内容，你们不需要这一步<br>    var str = markdownValue.<span class="hljs-keyword">slice</span>(<span class="hljs-number">3</span>,<span class="hljs-number">-4</span>);<br>    console.log(str);<br>    var decr = decrypt(str.toString(), keyy, ivv);<br>    markdown.innerHTML = decr.trim();<br>    markdown.style.display=&quot;block&quot;<br>&#125;<br>btn2.onclick = <span class="hljs-keyword">function</span> () &#123;<br>    var keyy = <span class="hljs-keyword">input</span>.<span class="hljs-keyword">value</span>;<br>    var ivv = inputIvv.<span class="hljs-keyword">value</span>;<br>    var markdownValue = markdown.innerHTML.trim();<br>    var str = markdownValue;<br>    var decr = encrypt(str.toString(), keyy, ivv);<br>    markdown.innerHTML = decr.trim();<br>    markdown.style.display=&quot;block&quot;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>加密输入框的css，使用了页面压缩，看起来比较乱。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#lock</span>&#123;<span class="hljs-attribute">overflow</span>:hidden;<span class="hljs-attribute">width</span>:<span class="hljs-number">248px</span>;<span class="hljs-attribute">position</span>:absolute;<span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;<span class="hljs-attribute">top</span>:<span class="hljs-number">230px</span>;<span class="hljs-attribute">margin-left</span>:-<span class="hljs-number">100px</span>&#125;<span class="hljs-selector-id">#lock-btn1</span>,<span class="hljs-selector-id">#lock-btn2</span>&#123;<span class="hljs-attribute">margin-left</span>:<span class="hljs-number">31.5px</span>;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">display</span>:block;<span class="hljs-attribute">width</span>:<span class="hljs-number">60px</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">20px</span>;<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">20px</span>;<span class="hljs-attribute">background-color</span>:transparent;<span class="hljs-attribute">color</span>:<span class="hljs-number">#000</span>;-webkit-<span class="hljs-attribute">transition</span>:all <span class="hljs-number">150ms</span> linear;-moz-<span class="hljs-attribute">transition</span>:all <span class="hljs-number">150ms</span> linear;-o-<span class="hljs-attribute">transition</span>:all <span class="hljs-number">150ms</span> linear;-ms-<span class="hljs-attribute">transition</span>:all <span class="hljs-number">150ms</span> linear;<span class="hljs-attribute">transition</span>:all <span class="hljs-number">150ms</span> linear;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;<span class="hljs-attribute">font-weight</span>:normal;<span class="hljs-attribute">text-align</span>:center;<span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#66615b</span>&#125;<span class="hljs-selector-id">#lock-btn2</span>&#123;<span class="hljs-attribute">margin-left</span>:<span class="hljs-number">61.5px</span>&#125;<span class="hljs-selector-id">#lock-btn1</span><span class="hljs-selector-pseudo">:hover</span>,<span class="hljs-selector-id">#lock-btn2</span><span class="hljs-selector-pseudo">:hover</span>&#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#66615b</span>;<span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.7</span>);<span class="hljs-attribute">border-color</span>:<span class="hljs-number">#66615b</span>&#125;<span class="hljs-selector-id">#lock-input</span>,<span class="hljs-selector-id">#lock-inputIvv</span>&#123;<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">20px</span>;<span class="hljs-attribute">outline</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span> <span class="hljs-number">10px</span>;<span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">20px</span>;<span class="hljs-attribute">background</span>:transparent;<span class="hljs-attribute">color</span>:<span class="hljs-number">#000</span>;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">1.25em</span>;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>&#125;<span class="hljs-selector-id">#lock-input</span><span class="hljs-selector-pseudo">:hover</span>,<span class="hljs-selector-id">#lock-inputIvv</span><span class="hljs-selector-pseudo">:hover</span>&#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#66615b</span>;<span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.7</span>);<span class="hljs-attribute">border-color</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.7</span>)&#125;<br></code></pre></td></tr></table></figure><p>每次需要发布加密的文章时，将文章标题命名为”加密.XXX“，页面就会出现加密解密框，首次发布请输入密钥和密钥偏移量 点击加密，拿到密文。然后将文章内容改为密文。保存好你的密钥和密钥偏移量，以后查看加密文章时，输入密钥和密钥偏移量 点击解密，即可看到原始的文章。<br>代码效果如下两图</p><p><img src="/2022/02/27/15/demo2.webp" alt="demo2"></p><p><img src="/2022/02/27/15/demo3.webp" alt="demo3"></p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原神反人类的pc端操作体验</title>
    <link href="/2021/04/20/14/"/>
    <url>/2021/04/20/14/</url>
    
    <content type="html"><![CDATA[<p>体验完原神后，感觉原神就是一款原生开发的手游大作，对pc端来说是没有细心打磨的移植作品。原神的优点很多，有优美的画风，有漂亮的建模，还有沉浸感十足的声优。从我个人的体验角度，原神对pc端的操作手感和交互逻辑还有特别大的进步空间。<br><img src="/img/14/0.webp" alt="原神反人类的pc端操作体验"><br>游戏为了追求多端操作统一，的确需要双端操作体验相互做出妥协，但是原神中 PC端妥协的太多了，完全可以让pc端的键位设置更加符合pc游戏的操作，并且丝毫不会影响手机端现有的体验。</p><p>例如，现在原神不支持“呼出鼠标”键的自定义。 ctrl是pc端其他同操作模式游戏中比较常用的呼出鼠标按键，原神把这个重要的按键赋予了“切换跑步行走状态”的功能，把alt这个按起来并不方便的按键 赋予了pc端玩家最常用的功能“呼出鼠标”。 切换跑步行走在我的体验中只有lsp欣赏角色的时候才会打开走两步，其余时间都恨不得角色移动的再快一点完全用不到。把这个平常用不到的功能放在ctrl里，只会让玩家多误触几次，我已经在设置里把“切换跑步行走状态”绑定了别的不会误触的按键。在现有操作模式下，我只能强迫自己少用鼠标多用其他快捷键。如果原神pc端可以把主界面的alt键持续按住呼出鼠标改为按下alt键呼出鼠标，再次按下alt键隐藏鼠标 ，在鼠标切出的状态随便按一下wasd移动键会自动隐藏鼠标开始移动的话，pc端使用鼠标的体验会好很多，这也是同类动作游戏的常用鼠标逻辑。</p><p>原神pc端没有最小化模式，也没有后台帧率限制。手机端玩游戏就是玩游戏，一般也不会原神挂机去干别的事情。但是pc端挂机是很常见的。比如临时挂机浏览网页。把别的应用切在前台，原神既会有声音还会消耗和前台玩原神一样的系统资源，对pc玩家不是很友好。切换后台这一点我见过的做的最极限的网游是黑沙，黑沙可以直接最小化到右下角的任务栏图标区，大大减轻了挂机时的系统资源消耗。原神做不到这么极限，也应该提供最基础的后台帧率限制。我个人觉得类似古剑ol等游戏一样 ，有一个游戏切换到后台帧率限制为每秒渲染1帧，这样临时挂机也可以舒服很多。不至于gpu在原神挂机玩家浏览网页的时候忍受原神60帧渲染的压力。</p><p>pc端游戏都会有快捷键和鼠标搭配使用。原神很多需要确定指令的场景，只能用鼠标硬点，没有和键盘互动的按键。这一点在移动端是合理的，因为移动端只有触摸事件。pc端是不同的，原神只是用鼠标简单粗暴的模拟了手游的触摸，没有让键盘也加入交互，pc端只有键盘和鼠标配合才能体验更佳。比如原神中点击地图上的标点 会出现删除和追踪按钮。现在有66个标点需要删除，现有的操作是鼠标点击标点，鼠标移动到删除，鼠标点删除，鼠标再移动到下一个标点，鼠标再点标点…以此类推。如果原神增加一个键盘事件来响应删除。那么在批量删除地图标点的时候，就可以鼠标只点击标点 键盘某个键用来确认删除，这样会比现在的只能用鼠标效率大大提高。就是基于这样简单模仿移动端触摸的原因，原神在操作上还有其他一些小瑕疵，比如邮件或活动鼠标点击领取原石后，还会弹出界面让玩家二次确认，移动端可以自然的再触摸一下屏幕。放到pc端还要再点击一下鼠标，非常的烦人，我都已经点确定了为什么还要再点一次，正常的pc游戏就会弹出提示过段时间提示自动消失。</p><p>操作体验差不多就是这些了，拉跨的战斗锁定改动比较麻烦就不说了，希望未来可以优化一下pc端的操作吧，不求有多出色，至少也应该有最基础的功能，而不是现在这样让人感觉是在用手机模拟器玩手游。希望原神不止是手游大作，成为pc大作。</p>]]></content>
    
    
    <categories>
      
      <category>game</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>在warframe里弹奏国际歌的正确姿态</title>
    <link href="/2020/12/16/13/"/>
    <url>/2020/12/16/13/</url>
    
    <content type="html"><![CDATA[<p>最近有很多朋友私聊我怎么弹奏国际歌，我也一一回复了弹奏代码和midi，还是有天诺不知道应该如何正确操作这些代码和midi，所以今天总结一下，希望通过这篇图文说明可以让国际歌唱响在wf宇宙中，同样适用于其他歌曲的弹奏。<br><img src="/img/13/0.webp" alt="在warframe里弹奏国际歌的正确姿态"></p><h2 id="弹奏效果"><a href="#弹奏效果" class="headerlink" title="弹奏效果"></a>弹奏效果</h2><iframe src="//player.bilibili.com/player.html?aid=712958779&bvid=BV1iD4y1X7mY&cid=262003538&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="300px"></iframe><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>warframe的三线琴在商场掉落，40白金一把。<br><img src="/2020/12/16/13/1.webp"><br>然后把三线琴装备到了物品栏，就可以按Q键使用三线琴了。</p><h2 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h2><p>想在warframe里弹奏国际歌有三种方式，第一种当然是dalao玩家的徒手弹神曲，一般人学不会。那么普通<del>天诺杂碎</del>天诺战士如何优雅的弹奏出国际歌呢，第一个办法是使用现成的三线琴代码弹奏，第二种是使用ShawzinBot脚本弹奏midi文件。</p><h2 id="代码弹奏"><a href="#代码弹奏" class="headerlink" title="代码弹奏"></a>代码弹奏</h2><p>第一步进入三线琴界面后按w打开三线琴的歌曲选择界面<br><img src="/2020/12/16/13/2.webp"></p><p>第二步打开右下角的自动播放<br><img src="/2020/12/16/13/3.webp"></p><p>第三步点击“加载歌曲到内存”选项<br><img src="/2020/12/16/13/4.webp"></p><p>第四步复制粘贴以下代码</p><p><code style="word-break: break-all;">5KAASAQSAgRAoUAwSA4KBAEBIMBQMBgJBwMCIUCQUCgSCoRCwMC4KDAJDIEDQEDgEDwKEASEQSEgREoUEwSE4KFAEFIMFQMFgJFwMF4UGASGIRGQUGgiGwRHASHQSHghHwUH4RIARIQMIgRIoSIwMI4RJARJQKJgKJoJJwKJ4MKAMKQMKYUKgUKwSK4RLARLQRLgULwUMAUMQRMYKMgKMoJMwKM4hNAhNQSNgMNoRNwSN4ROAUOQSOgMOwKPAKPQKPghPwhP4UP8SQESQUKQkKQ0EQ8MREMRUJRkUR0UR8SSARSIRSYMSoKS4KTIKTMhTYhToUT4KUISUYSUoRU4RVIRVQMVYMVoKVwMV4UWIUWYhWshW0UW4SXASXQKXgKXwEX4MYAMYQJYgUYwUY4SY8RZERZUMZkKZ0haEhaUkagkawibAhbUUbkUb0hb8icEicchckhc0hc8kdEkdUidkhd0UeEUeUheciekie8hfEhfUUfc</code></p><p><img src="/2020/12/16/13/5.webp"><br>点击确定，好了，你和你的队友就能听到这首热泪盈眶的国际歌了。</p><h2 id="脚本弹奏"><a href="#脚本弹奏" class="headerlink" title="脚本弹奏"></a>脚本弹奏</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><strong>使用弹奏脚本可能有封号风险，请谨慎操作</strong>，一般来说代码弹奏已经可以满足天诺战士的音乐需求，如果你追求更好的弹奏效果请往下看。<br>首先我们需要下载 ShawzinBot 软件和国际歌的midi文件。<br>ShawzinBot官方github地址为 <a href="https://github.com/ianespana/ShawzinBot">点击下载</a>，<br>ShawzinBot国内下载链接为 <a href="https://wws.lanzoui.com/ipNaPjex8yd">点击下载</a>，根据网络任选其一安装即可。</p><p>然后需要下载国际歌midi文件 百度云链接: <a href="https://pan.baidu.com/s/1WYFnT8Ui_2ckGNkWfcDKZw">点击下载</a> 提取码: jmvc  (蓝凑云不支持mid音乐格式只能用速度慢的百度云了不过文件只有3kb，也慢不到哪里去)</p><h3 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h3><p>第一步打开三线琴界面，按TAB按键切换到半音<br><img src="/2020/12/16/13/2.webp"></p><p>第二步打开ShawzinBot，左上角选择国际歌midi文件<br><img src="/2020/12/16/13/7.webp"></p><p>第三步点击ShawzinBot的播放按钮，会自动跳转到warframe开始弹奏<br><img src="/2020/12/16/13/8.webp"></p><p>ok，你已经成功自动弹奏国际歌。</p><p>隐藏技巧：这首国际歌的midi选择1.25倍速弹奏可能更燃<br><img src="/2020/12/16/13/9.webp"></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ol><li>代码弹奏简单高效没有任何封号风险，但是可玩性不高</li><li>脚本弹奏能实现更进阶的操作，例如一个人弹奏三个人和声，然而ShawzinBot毕竟是脚本，尽管de可能对三线琴的界面使用脚本网开一面但是也不能完全排除误封号的可能性。</li></ol><h2 id="其他音乐"><a href="#其他音乐" class="headerlink" title="其他音乐"></a>其他音乐</h2><p>那么如何寻找其他音乐的代码或者midi文件。可以在搜索引擎输入“三线琴代码”或“warframe midi”，有很多天诺战士的分享，midi文件尽量找单音轨的，如果是多音轨歌曲可以尝试使用 “MidiEditor”等免费音乐编辑软件编辑。</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul><li>国际歌的midi文件来源于 @清丰君qfj </li><li>@才不是绅士的阿明告诉我MidiEditor的操作方法，让我成功去除掉了原midi中的节拍。</li></ul>]]></content>
    
    
    <categories>
      
      <category>game</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我心中的脱口秀大会冠军不是王勉</title>
    <link href="/2020/09/24/12/"/>
    <url>/2020/09/24/12/</url>
    
    <content type="html"><![CDATA[<p>脱口秀大会的冠军是王勉。脱口秀大会的冠军是王勉？用沈腾的话来说“我甚至都不知道这算不算脱口秀”。我觉得他更适合参加乐队的夏天。王勉的顺口溜脱口秀是用唱歌的方式，音乐的现场感染力本身就比文字更强一些，能看出现场观众和领笑员都很嗨，但是我个人认为脱口秀本身还是要有一些文本量来支撑自己的观点的，王勉的那首逃避称得上全场最佳十分精彩，可惜的是王勉之后的顺口溜脱口秀完全是一个模板工厂做出来的产品。这些产品有着雷同的旋律，固化的反转，甚至连反转时的怒吼都一样。</p><p>王勉的确有两三首（这两三首都不在总决赛之内）很精彩的作品，但是仅仅这三首作品就说他超过了那些文本输出很强型选手我是很不认可的。在我看来，王勉和老田是有相似之处的，老田靠着car engineer爆笑全场，第二场用类似的手法场上却没有发笑。王勉运气更好一些，，用着高度相似的顺口溜脱口秀一直走到决赛打开了脱口秀大会财富密码拿下了冠军。</p><p>个人觉得所谓的唱歌脱口秀就类似于武功里的奇招怪招，你说他很厉害我说那当然，但是要说他是天下第一武林盟主我第一个不认可。</p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>阿尔比恩如何获得白骨马</title>
    <link href="/2020/09/04/10/"/>
    <url>/2020/09/04/10/</url>
    
    <content type="html"><![CDATA[<h2 id="关于阿尔比恩"><a href="#关于阿尔比恩" class="headerlink" title="关于阿尔比恩"></a>关于阿尔比恩</h2><p>阿尔比恩，英文名（Albion）是一款三端互通的沙盒网游，因为近期官方加入了中文语言，所以近期阿尔比恩加入了很多中国的新鲜血液。就我个人的游戏体验来说阿尔比恩有一些类似于曾经很火爆的传奇类网游的游戏特质，有安全区，有自由PK区，有工会也有江湖。<br>白骨马是阿尔比恩里萌新十分容易获得的一款皮肤。</p><h2 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h2><p>1.在任意主城市场购买“死灵秘药”，价格为750银币左右，萌新也买得起。<br><img src="/img/10/1.webp"></p><p>2.在市场上方的npc处兑换<br><img src="/2020/09/04/10/2.webp"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>阿尔比恩使用外观的方法也很简单，点击左上角的头像，点击外观，然后选中白骨马即可<br><img src="/2020/09/04/10/3.webp"></p>]]></content>
    
    
    <categories>
      
      <category>game</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ngnix使用CDN后正确获取访客IP</title>
    <link href="/2020/08/30/9/"/>
    <url>/2020/08/30/9/</url>
    
    <content type="html"><![CDATA[<p>如果是使用一层cdn，那么在nginx的配置文件http{}字段中加入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">set_real_ip_from</span> <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>;<br><span class="hljs-attribute">real_ip_header</span> X-Forwarded-For;<br></code></pre></td></tr></table></figure><p>即可。</p><p>如果是使用了两层或以上cdn(使用了cdn和web防火墙也适用)，那么在nginx的配置文件http{}字段中加入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">set_real_ip_from</span> <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>;<br><span class="hljs-attribute">real_ip_header</span> X-Forwarded-For;<br><span class="hljs-attribute">real_ip_recursive</span> <span class="hljs-literal">on</span>;<br></code></pre></td></tr></table></figure><p>即可。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ngnix开启HSTS</title>
    <link href="/2020/08/17/8/"/>
    <url>/2020/08/17/8/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是HSTS"><a href="#什么是HSTS" class="headerlink" title="什么是HSTS"></a>什么是HSTS</h2><blockquote><p>HTTP严格传输安全协议（英语：HTTP Strict Transport Security，简称：HSTS），是一套由互联网工程任务组发布的互联网安全策略机制。网站可以选择使用HSTS策略，来让浏览器强制使用HTTPS与网站进行通信，以减少会话劫持风险。<br>HSTS可以很大程度上解决SSL剥离攻击，因为只要浏览器曾经与服务器创建过一次安全连接，之后浏览器会强制使用HTTPS，即使链接被换成了HTTP。<br>##开启HSTS证书的前提##<br>正确设置了SSL证书，网站可以通过https协议正常访问<br>##ngnix如何开启HSTS##<br>在网站配置文件server{}中加入</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">add_header <span class="hljs-keyword">Strict</span>-Transport-<span class="hljs-keyword">Security</span> &quot;max-age=31536000;<br></code></pre></td></tr></table></figure><p>如果追求更好的安全效果可以改成加入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">add_header <span class="hljs-keyword">Strict</span>-Transport-<span class="hljs-keyword">Security</span> &quot;max-age=31536000; includeSubdomains; preload&quot;;<br><br></code></pre></td></tr></table></figure><h4 id="includeSubdomains参数会使得浏览器在请求所有子域名时都强制要求HTTPS协议，如果没有给所有子域名都添加SSL证书的打算，请不要输入这个参数"><a href="#includeSubdomains参数会使得浏览器在请求所有子域名时都强制要求HTTPS协议，如果没有给所有子域名都添加SSL证书的打算，请不要输入这个参数" class="headerlink" title="includeSubdomains参数会使得浏览器在请求所有子域名时都强制要求HTTPS协议，如果没有给所有子域名都添加SSL证书的打算，请不要输入这个参数"></a>includeSubdomains参数会使得浏览器在请求所有子域名时都强制要求HTTPS协议，如果没有给所有子域名都添加SSL证书的打算，请不要输入这个参数</h4>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安利一个steam上好玩的社工解密游戏《全网公敌》</title>
    <link href="/2020/07/28/6/"/>
    <url>/2020/07/28/6/</url>
    
    <content type="html"><![CDATA[<h2 id="发现宝藏游戏"><a href="#发现宝藏游戏" class="headerlink" title="发现宝藏游戏"></a>发现宝藏游戏</h2><p>今天在steam上试玩了一个我很喜欢的游戏《全网公敌》，试玩版一个小时的体验，沉浸感十足，八月会发布正式版，默默地期待一下吧。刚好最近我的身边就有一个100%真实的社工案例，我把整个过程用文字和截图复述给了Aluba的工作人员，我的语言功底也不怎么好说的罗里吧嗦的给他添麻烦了，希望以后的dlc能上这个案例吧，哈哈哈。<br>有想免费试玩的朋友可以点击文末的链接试玩，或者直接在steam里搜索全网公敌。<br><img src="/img/6/1.webp" alt="全网公敌"></p><h2 id="关于这款游戏"><a href="#关于这款游戏" class="headerlink" title="关于这款游戏"></a>关于这款游戏</h2><p>大家好，我们是Aluba工作室，很高兴和大家分享我们的游戏:全网公敌<br>没错，这是一款和人肉搜索相关的游戏，同时结合了网络暴力、大数据、隐私泄露等社会问题，剧情向的解谜游戏。<br>我们很多剧情设定就参考了真实事件，所以从一些人物形象设定图上你也能看到一些熟悉的身影，玩完游戏也能联想到现实。<br>最开始定游戏题材时，我们也是考虑了很久。因为受这是我们的战争、请出示证件、奥威尔等优秀的独立游戏的影响，我们也想做出一款能够让玩家脱离游戏之外有所思考的游戏，因此在题材方面也是绞尽脑汁。<br><img src="/2020/07/28/6/2.webp" alt="全网公敌"></p><h2 id="题材构思"><a href="#题材构思" class="headerlink" title="题材构思"></a>题材构思</h2><p>在团队立项会的“友好”沟通中，我们发现当互联网不断渗透人们的生活，使信息加速传递时，一个负面事件可以很快传遍整个互联网。<br>在这个过程中，罪恶会被曝光、被惩治，这些会让人们大快人心；但也有人会遭受着来自网络键盘侠满怀恶意的咒骂与凌辱。当这些网络暴力不断升级，带来的结果往往会超出事件本身，更有甚者不堪压力而结束宝贵的生命。<br>因此我们决定开发这么一款与“黑客”、“人肉”、“隐私数据泄露”题材相关的游戏，希望让玩家去扮演一名黑客，社工（人肉）目标人物，找出他们的隐私秘密。希望通过这个过程让玩家产生思考，并作出自己判断。<br><img src="/2020/07/28/6/3.webp" alt="全网公敌"></p><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><p>经过一年多的努力，我们完成了一部分游戏的构想，实现了一些社工（人肉）手段，并将它们融入进了我们的游戏中：</p><h3 id="网络搜索"><a href="#网络搜索" class="headerlink" title="网络搜索"></a>网络搜索</h3><p>玩家通过浏览器搜索功能收集目标对象的基础信息。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>利用已知信息输入到数据库中，通过筛选后或许目标对象的其他信息。</p><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><p>通过获得的目标人物信息来生成密码，用于登陆各平台的账户（包括邮箱、社交平台、聊天软件等）。</p><h3 id="伪装"><a href="#伪装" class="headerlink" title="伪装"></a>伪装</h3><p>获取目标对象的需求、社交圈等，根据信息选择伪装，通过和目标对象接触套取更多信息。</p><h3 id="聊天套话"><a href="#聊天套话" class="headerlink" title="聊天套话"></a>聊天套话</h3><p>添加目标对象为好友后，进行聊天套话获取信息。</p><h3 id="图片分析"><a href="#图片分析" class="headerlink" title="图片分析"></a>图片分析</h3><p>从图片中获取有价值的信息内容及相关线索。</p><h3 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h3><p>发送钓鱼链接侵入目标人物的硬件设备（电脑、手机），获取到隐私信息。</p><p>当然，后期还会解锁更多的高阶社工方法！<br><img src="/2020/07/28/6/4.webp" alt="全网公敌"></p><h2 id="游戏玩法"><a href="#游戏玩法" class="headerlink" title="游戏玩法"></a>游戏玩法</h2><p> 游戏中玩家扮演一名黑客，接受记者的委托，完成一个个社工事件。<br> 在整个过程中，玩家需要使用多种社工方法来达到最终目的。<br> 每个社工方法都会有相应的使用条件，使用成功会获得线索。<br> 游戏会对玩家的行为进行善恶判定，不同的判定会触发对应的剧情走向。<br><img src="/2020/07/28/6/5.webp" alt="全网公敌"></p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://store.steampowered.com/app/1216710/">点击进入steam页面</a></p><h5 id="本文出现的图片和绝大文字搬运自steam页面，Aluba工作室版权所有"><a href="#本文出现的图片和绝大文字搬运自steam页面，Aluba工作室版权所有" class="headerlink" title="本文出现的图片和绝大文字搬运自steam页面，Aluba工作室版权所有"></a>本文出现的图片和绝大文字搬运自steam页面，Aluba工作室版权所有</h5>]]></content>
    
    
    <categories>
      
      <category>game</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《二狗子汉奸李富贵》节选</title>
    <link href="/2020/07/07/5/"/>
    <url>/2020/07/07/5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>亨利：我在广州待了一阵子，我发觉你们中国人什么都吃。”</p><p>李富贵：“哈哈，你说的是广东人，中国别的地方没有那么宽的食谱，不过广东人也不是什么都吃，好像他们就不太喜欢吃狗。”</p><p>亨利：“吃狗？”亨利的语调开始打颤了。</p><p>李富贵：“是啊，吃狗，有什么问题吗？”</p><p>“人怎么可以吃狗。”</p><p>李富贵：“人为什么不可以吃狗，你刚刚说中国人什么都吃，我还以为你知道呢。”</p><p>亨利：“我刚才说的是指蛇、猴子一类的东西，可是狗是人类的朋友，人怎能吃自己的朋友呢？”</p><p>李富贵：“啊，对啊，狗是人类的朋友，我怎么把这个给忘了。”李富贵作出一幅恍然大悟的样子，“可是，亨利先生，你吃猪吗？”</p><p>亨利：“吃啊，我不是穆斯林。”</p><p>李富贵：“那难道猪是您的仇人吗？”</p><p>这下亨利听出李富贵是话里有话了，这个中国人似乎想和自己进行一场辩论，哼哼，叫你这个野蛮人见识一下什么是哈佛的高材生：</p><p>亨利：“猪当然不是人类的仇人，但是猪也不是朋友啊。”</p><p>李富贵：“不是仇人，也不是朋友，算个陌生人吧，您的意思是说朋友不能吃，但是可以吃陌生人，您可真高尚啊，能成为您的朋友我非常荣幸。”</p><p>亨利：“李将军，我说朋友只是一个比喻，并不是真的要去吃，请你不要用这种危言耸听的语气。”</p><p>李富贵：“好，那么我们就不用吃这个词来做填空，这个问题的主语是‘我’，谓语有您来填，宾语是‘陌生人’，随您填上一个什么词，打、杀、抢劫、强奸都可以，然后我们再来看看这句话能不能让大家接受。”</p><p>这一下亨利无言以对，把狗拟人化是自己提出来的，现在对手居然用这个办法来对付自己，如果自己无法应对的话，这在辩论中属于完败，他实在是无法接受这样一个结果。</p><p>亨利：“我不认为猪可以和狗相提并论，我们当然可以吃一些比较低级的动物，但是狗不行。”现在他只好易地再战，不提朋友那回事了。</p><p>李富贵：“对呀，狗比猪高级，可是老鼠更低级啊，为什么先生不吃老鼠呢？而且我想请问一下，亨利先生养狗吗？”</p><p>亨利：“养啊，我家有两条德国牧羊犬，还有两条牛头犬。”他很高兴可以利用回答第二个问题来回避第一个。</p><p>李富贵：“那你为他们什么呢？猪肉吗？”</p><p>这个问题显然有陷阱，可是亨利一时也猜不出对方的意图，“也喂猪肉，也喂牛肉。”</p><p>李富贵：“为什么你认为狗有权利吃猪呢？是因为狗比猪高级很多吗？比人与狗之间的差别还要大？”</p><p>又是以子之矛攻子之盾，亨利发现自己的对手有多么强大了。</p><p>看到亨利沉默不语李富贵拍了拍他的肩膀：“看来您不再坚持这个伪善的观点了，很好我们可以结束这场讨论去吃饭了。”</p><p>亨利：“您一定想在餐桌上点一盘狗肉吧？”亨利的语气有点酸酸的。</p><p>李富贵：“噢，不好意思，我不喜欢吃狗肉。”</p><p>亨利：“那，那您刚才和我争什么？”亨利张大了嘴。</p><p>李富贵：“我很欣赏你们西方的一句话‘我不同意你的观点，不过我会用鲜血来捍卫你表达你的观点的权利’，同样我不喜欢吃狗肉但我将捍卫别人吃狗肉的权利。”</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何清理域名解析的本地dns缓存</title>
    <link href="/2020/07/03/4/"/>
    <url>/2020/07/03/4/</url>
    
    <content type="html"><![CDATA[<p>清理本地缓存的快捷方法：</p><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>Win+R快捷键</p><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p>输入：cmd</p><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>输入：ipconfig&#x2F;flushdns 然后按回车<br><img src="/img/4/1.png" alt="如何清理域名解析的本地dns缓存"></p><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p>愉快的访问需要访问的网站</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>欢迎使用 WordPress</title>
    <link href="/2020/06/22/1/"/>
    <url>/2020/06/22/1/</url>
    
    <content type="html"><![CDATA[<p>如果您看到这篇文章,表示您的 blog 已经安装成功…</p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决typecho在微信内置浏览器中评论错误的问题</title>
    <link href="/2020/06/22/3/"/>
    <url>/2020/06/22/3/</url>
    
    <content type="html"><![CDATA[<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>打开typecho数据库下的表”typecho_comments”,把”agent”参数的长度从200修改到500，大功告成！</p><hr><h2 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h2><p>微信内置浏览器某些情况下的UA会达到240以上，为防止微信内置浏览器以后又在UA里增加字段，直接把typecho接收的UA长度设置成500即可。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
