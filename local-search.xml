<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>nginx反向代理的妙用</title>
    <link href="/2023/04/12/25/"/>
    <url>/2023/04/12/25/</url>
    
    <content type="html"><![CDATA[<p>nginx反向代理的妙用，编写中</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodeJs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue自定义全局指令实现拖拽弹窗等元素</title>
    <link href="/2022/12/30/21/"/>
    <url>/2022/12/30/21/</url>
    
    <content type="html"><![CDATA[<h2 id="全局注册指令"><a href="#全局注册指令" class="headerlink" title="全局注册指令"></a>全局注册指令</h2><p>注意：bind是vue2的自定义指令事件，如果你在vue3中使用请把bind改为beforeMount，附上vue2指令的生命周期函数和vue3的对比。</p><table><thead><tr><th align="left">vue2</th><th align="center">vue3</th><th align="right">备注</th></tr></thead><tbody><tr><td align="left">bind</td><td align="center">beforeMount</td><td align="right">指令绑定到元素后执行。只执行一次。</td></tr><tr><td align="left">inserted</td><td align="center">mounted</td><td align="right">元素插入父 DOM 后执行</td></tr><tr><td align="left">-</td><td align="center">beforeUpdate</td><td align="right">元素本身更新之前执行</td></tr><tr><td align="left">componentUpdated</td><td align="center">updated</td><td align="right">组件和子级更新后执行</td></tr><tr><td align="left">-</td><td align="center">beforeUnmount</td><td align="right">卸载元素之前执行</td></tr><tr><td align="left">unbind</td><td align="center">unmounted</td><td align="right">指令被移除，就会执行，也只执行一次</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;move&#x27;</span>, &#123;<br>  <span class="hljs-title function_">bind</span>(<span class="hljs-params">el</span>) &#123;<br>    <br>      <span class="hljs-keyword">let</span> moveElement = el.<span class="hljs-property">firstElementChild</span>;<br>      el.<span class="hljs-property">mouseDown</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <br>          <span class="hljs-comment">// X,Y为计算的偏移量，就是鼠标点击的位置相对于元素左上角圆点的距离</span><br>          <span class="hljs-keyword">let</span> X = e.<span class="hljs-property">clientX</span> - el.<span class="hljs-property">offsetLeft</span>;<br>          <span class="hljs-keyword">let</span> Y = e.<span class="hljs-property">clientY</span> - el.<span class="hljs-property">offsetTop</span>;<br>          <span class="hljs-keyword">const</span> <span class="hljs-title function_">move</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>              <span class="hljs-comment">// 0 &lt; left &amp;&amp; left &lt; window.innerWidth - el.offsetWidth 保证移动过程中，元素不超出窗口</span><br>              <span class="hljs-keyword">let</span> left = e.<span class="hljs-property">clientX</span> - X;<br>              <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt; left &amp;&amp; left &lt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> - el.<span class="hljs-property">offsetWidth</span>) &#123;<br>              el.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = left + <span class="hljs-string">&#x27;px&#x27;</span>;<br>              &#125;<br>              <span class="hljs-comment">// console.log(left, window.innerWidth, el.offsetWidth)</span><br><br>              <span class="hljs-comment">// 0 &lt; top &amp;&amp; top &lt; window.innerHeight - el.offsetHeight 保证移动过程中，元素不超出窗口</span><br>              <span class="hljs-keyword">let</span> top = e.<span class="hljs-property">clientY</span> - Y;<br>              <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &lt; top &amp;&amp; top &lt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> - el.<span class="hljs-property">offsetHeight</span>) &#123;<br>              el.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = top + <span class="hljs-string">&#x27;px&#x27;</span>;<br>              &#125;<br>              <span class="hljs-comment">// console.log(top, window.innerHeight, el.offsetHeight)</span><br>          &#125;<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, move)<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>              <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, move)<br>          &#125;)<br>      &#125;<br>      moveElement.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousedown&#x27;</span>, el.<span class="hljs-property">mouseDown</span>);<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div v-move&gt;</span> <span class="hljs-section">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><h2 id="优化空间"><a href="#优化空间" class="headerlink" title="优化空间"></a>优化空间</h2><p> 指令来源于互联网，感觉还有优化的空间，例如<br> 1.目前是默认指定元素的第一个子元素为绑定拖拽事件的元素，一般为弹窗的title区。可以再加一个参数v-mode&#x3D;”#title”来自定义绑定拖拽事件的元素。<br> 2.目前弹窗关闭后再次打开，上次拖拽添加的”top”和”left”还在，会导致弹窗不能恢复到默认位置，只能在弹窗关闭的事件里再额外执行this.$refs[“绑定指令的弹窗元素”].style.cssText &#x3D; ‘display: none;’，使用起来比较麻烦，最好能在指令里能监听元素状态是否为’display: none;’，如果是none隐藏状态，就删除元素style中的”top”和”left”</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用GitHub Action分布式部署静态网站</title>
    <link href="/2022/10/27/19/"/>
    <url>/2022/10/27/19/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是GitHub-Action"><a href="#什么是GitHub-Action" class="headerlink" title="什么是GitHub Action"></a>什么是GitHub Action</h2><p>通俗的理解GitHub Action是通过push代码等方式自动触发运行用户提前编写好的工作流脚本，这些脚本会运行在GitHub提供的虚拟机中，虚拟机会像机器人流水线作业一样一步一步来完成这些复杂频繁的的工作流程，解放人力。</p><h2 id="分布式部署网站"><a href="#分布式部署网站" class="headerlink" title="分布式部署网站"></a>分布式部署网站</h2><p>目前我使用的网站结构在两个git仓库使用了两个GitHub Action流程，如下流程图所示：每次push博客生成器源码git仓库后，执行GitHub Action工作流程，将编译好的网站html源码push到另一个存放网站html代码的git仓库以及gitee备用仓库。存放html源码的仓库在收到push后又会触发自己仓库的GitHub Action，把html代码上传到阿里云oss中。</p><pre><code class="mermaid" >graph TB    A[本地书写文章] -- 主动推送 --> B[(github-hexo静态网页生成器源码仓库)];    B -- GitHub Action one --> C[(github-html代码仓库)];    B -- GitHub Action one --> D[(gitee-html代码备用仓库)];    C -- GitHub Action two --> E[(阿里云OSS)];    </code></pre><p>看起来有些繁琐但是人工参与的只有第一步向仓库push代码，剩下的步骤都由勤劳的GitHub Action来自动集成。网站访客在访问域名后，dns会根据访客ip智能把请求到最佳节点。”github-html代码仓库”开启了git pages用于国外访客的域名解析,阿里云OSS用于国内ip的访客使用,并且使用了cdn访问速度飞快。gitee备用仓库由于监管原因不能绑定自定义域名暂无使用只是用于备份存储，整个访问流程如下所示。</p><pre><code class="mermaid" >graph LR    A[网站访客] --> B{dns判断访客IP?};    B -- 是国内访问,解析至 --> C[阿里云cdn];    C -.-> D[阿里云OSS];    B -- 否,国外访问,解析至 ---> E[gitPages网页托管];</code></pre><h2 id="GitHub-Action代码"><a href="#GitHub-Action代码" class="headerlink" title="GitHub Action代码"></a>GitHub Action代码</h2><p>上面这些繁琐的工作都是靠下面两个GitHub Action实现</p><h3 id="博客生成器仓库的GitHub-Action-one"><a href="#博客生成器仓库的GitHub-Action-one" class="headerlink" title="博客生成器仓库的GitHub Action one"></a>博客生成器仓库的GitHub Action one</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Action 的名字</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Auto</span> <span class="hljs-string">Deploy</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-comment"># 触发条件1：main 分支收到 push 后执行任务。</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-comment"># 触发条件2：手动按钮</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><br><span class="hljs-comment"># 这里放环境变量,需要替换成你自己的</span><br><span class="hljs-attr">env:</span><br>  <span class="hljs-comment"># Hexo 编译后使用此 git 用户部署到 github 仓库</span><br>  <span class="hljs-attr">GIT_USER:</span> <span class="hljs-string">xiyuvi</span><br>  <span class="hljs-comment"># Hexo 编译后使用此 git 邮箱部署到 github 仓库</span><br>  <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-number">20702001</span><span class="hljs-string">@qq.com</span><br>  <span class="hljs-comment"># Hexo 编译后要部署的 github 仓库</span><br>  <span class="hljs-attr">GIT_DEPLOY_REPO:</span> <span class="hljs-string">xiyuvi/xiyuvi.github.io</span><br>  <span class="hljs-comment"># Hexo 编译后要部署到的分支</span><br>  <span class="hljs-attr">GIT_DEPLOY_BRANCH:</span> <span class="hljs-string">main</span><br><br>  <span class="hljs-comment"># Hexo 编译后使用此 gitee 用户部署到gitee仓库</span><br>  <span class="hljs-attr">GITEE_USER:</span> <span class="hljs-string">xiyu</span><br>  <span class="hljs-comment"># Hexo 编译后要部署的 gitee 仓库</span><br>  <span class="hljs-attr">GITEE_DEPLOY_REPO:</span> <span class="hljs-string">xiyu/bloghtml</span><br>  <span class="hljs-comment"># Hexo 编译后要部署到的分支</span><br>  <span class="hljs-attr">GITEE_DEPLOY_BRANCH:</span> <span class="hljs-string">main</span><br><br>  <span class="hljs-comment"># 注意替换为你的 GitHub 源仓库地址</span><br>  <span class="hljs-attr">GIT_SOURCE_REPO:</span> <span class="hljs-string">git@github.com:xiyuvi/xiyuvi.github.io.git</span><br>  <span class="hljs-comment"># 注意替换为你的 Gitee 目标仓库地址</span><br>  <span class="hljs-attr">GITEE_DESTINATION_REPO:</span> <span class="hljs-string">git@gitee.com:xiyu/bloghtml.git</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">on</span> <span class="hljs-string">node</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">and</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.os</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">github.event.repository.owner.id</span> <span class="hljs-string">==</span> <span class="hljs-string">github.event.sender.id</span><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">os:</span> [<span class="hljs-string">ubuntu-18.04</span>]<br>        <span class="hljs-attr">node_version:</span> [<span class="hljs-number">12.</span><span class="hljs-string">x</span>]<br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">deploy</span> <span class="hljs-string">repo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">repository:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.GIT_DEPLOY_REPO</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.GIT_DEPLOY_BRANCH</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">.deploy_git</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Configuration</span> <span class="hljs-string">environment</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">HEXO_DEPLOY_PRI:</span> <span class="hljs-string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span><br><span class="hljs-string">          mkdir -p ~/.ssh/</span><br><span class="hljs-string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">          chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">          ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">          # coding 已取消同步</span><br><span class="hljs-string">          ssh-keyscan -t rsa e.coding.net &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">          ssh-keyscan -t rsa gitee.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">          git config --global user.name $GIT_USER</span><br><span class="hljs-string">          git config --global user.email $GIT_EMAIL</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm install hexo-cli -g</span><br><span class="hljs-string">          npm install</span><br><span class="hljs-string">          # 根据你安装的组件进行安装</span><br><span class="hljs-string">          # npm uninstall hexo-generator-index --save</span><br><span class="hljs-string">          # npm install hexo-baidu-url-submit hexo-generator-index2 hexo-symbols-count-time hexo-blog-encrypt hexo-deployer-git --save</span><br><span class="hljs-string">          # 复制中文语言包，解决菜单英文的问题</span><br><span class="hljs-string">          # cp zh-CN.yml node_modules/hexo-theme-next/languages/</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          npm run deploy</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Sync</span> <span class="hljs-string">to</span> <span class="hljs-string">Gitee</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">wearerequired/git-mirror-action@master</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-comment"># 直接使用了 HEXO_DEPLOY_PRI</span><br>          <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_PRI</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-comment"># GitHub 源仓库地址</span><br>          <span class="hljs-attr">source-repo:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.GIT_SOURCE_REPO</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># Gitee 目标仓库地址</span><br>          <span class="hljs-attr">destination-repo:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.GITEE_DESTINATION_REPO</span> <span class="hljs-string">&#125;&#125;</span><br><br>      <span class="hljs-comment"># - name: Build Gitee Pages</span><br>        <span class="hljs-comment"># uses: yanglbme/gitee-pages-action@main</span><br>        <span class="hljs-comment"># with:</span><br>          <span class="hljs-comment"># 你的 Gitee 用户名</span><br>          <span class="hljs-comment"># gitee-username: $&#123;&#123; env.GITEE_USER &#125;&#125;</span><br>          <span class="hljs-comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span><br>          <span class="hljs-comment"># gitee-password: $&#123;&#123; secrets.GITEE_PASSWORD &#125;&#125;</span><br>          <span class="hljs-comment"># 你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span><br>          <span class="hljs-comment"># gitee-repo: $&#123;&#123; env.GITEE_DEPLOY_REPO &#125;&#125;</span><br>          <span class="hljs-comment"># 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span><br>          <span class="hljs-comment"># branch: $&#123;&#123; env.GITEE_DEPLOY_BRANCH &#125;&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="html代码仓库的GitHub-Action-two"><a href="#html代码仓库的GitHub-Action-two" class="headerlink" title="html代码仓库的GitHub Action two"></a>html代码仓库的GitHub Action two</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">ossWorkflow</span><br><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;12.x&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Blog</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm install</span><br><span class="hljs-string"></span>        <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">manyuanrong/setup-ossutil@master</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-comment"># endpoint 可以去oss控制台上查看</span><br>        <span class="hljs-attr">endpoint:</span> <span class="hljs-string">&quot;oss-cn-chengdu.aliyuncs.com&quot;</span><br>        <span class="hljs-comment"># 使用我们之前配置在secrets里面的accesskeys来配置ossutil</span><br>        <span class="hljs-attr">access-key-id:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">access-key-secret:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SECRET</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deply</span> <span class="hljs-string">To</span> <span class="hljs-string">OSS</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        cp -ri  ./   ../output</span><br><span class="hljs-string">        cd ../output</span><br><span class="hljs-string">        rm -rf .git .github</span><br><span class="hljs-string">        ossutil cp ./ oss://xiyublog/ -rf</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>GitHub Action还能用来做更多可以自动集成化的事情，希望大家都能挖掘出更多有意义的用法 。 </p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用crypto-js实现静态网页数据加密</title>
    <link href="/2022/02/27/15/"/>
    <url>/2022/02/27/15/</url>
    
    <content type="html"><![CDATA[<h2 id="crypto-js是什么"><a href="#crypto-js是什么" class="headerlink" title="crypto-js是什么"></a>crypto-js是什么</h2><p>使用crypto-js也是很久之前的事了，一直都没有好好整理，今天借助博客重构的机会，好好捋一下。crypto-js是一个加密算法库，支持哈希算法，如：MD5、SHA-1、SHA-2、SHA-3、RIPEMD-160也支持多种加密方式，如：AES、DES, Triple DES、Rabbit、RC4, RC4Drop。可实现多种多样的加密算法。<br><img src="/2022/02/27/15/0.webp"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在<a href="https://github.com/brix/crypto-js">github.com&#x2F;brix&#x2F;crypto-js</a> 上引入相关文件，因为我只需要使用aes加密算法，所以没有引入整个库而是只下载了aes.js单个文件。<br>借助强大的crypto-js，我们只需要几行代码就可以实现加密效果，下面是一个使用aes加密的demo，效果为在页面加密字符串“123456”，并解密加密的密文。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;script src=&quot;./aes.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;script&gt;<br>        //aes加密<br>        <span class="hljs-keyword">function</span> encrypt(word) &#123;<br>            var key = CryptoJS.enc.Utf8.parse(&quot;1234560000000000&quot;); //<span class="hljs-number">16</span>位<br>            var iv = CryptoJS.enc.Utf8.parse(&quot;1234567890000000&quot;);<br>            var <span class="hljs-keyword">encrypted</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (typeof (word) == <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>                var srcs = CryptoJS.enc.Utf8.parse(word);<br>                <span class="hljs-keyword">encrypted</span> = CryptoJS.AES.encrypt(srcs, key, &#123;<br>                    iv: iv,<br>                    mode: CryptoJS.mode.CBC,<br>                    padding: CryptoJS.pad.Pkcs7<br>                &#125;);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeof (word) == <span class="hljs-string">&#x27;object&#x27;</span>) &#123; //对象格式的转成<span class="hljs-type">json</span>字符串<br>                data = <span class="hljs-type">JSON</span>.stringify(word);<br>                var srcs = CryptoJS.enc.Utf8.parse(data);<br>                <span class="hljs-keyword">encrypted</span> = CryptoJS.AES.encrypt(srcs, key, &#123;<br>                    iv: iv,<br>                    mode: CryptoJS.mode.CBC,<br>                    padding: CryptoJS.pad.Pkcs7<br>                &#125;)<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">encrypted</span>.ciphertext.toString();<br>        &#125;<br>        // aes解密<br>        <span class="hljs-keyword">function</span> decrypt(word) &#123;<br>            var key = CryptoJS.enc.Utf8.parse(&quot;1234560000000000&quot;);<br>            var iv = CryptoJS.enc.Utf8.parse(&quot;1234567890000000&quot;);<br>            var encryptedHexStr = CryptoJS.enc.Hex.parse(word);<br>            var srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr);<br>            var decrypt = CryptoJS.AES.decrypt(srcs, key, &#123;<br>                iv: iv,<br>                mode: CryptoJS.mode.CBC,<br>                padding: CryptoJS.pad.Pkcs7<br>            &#125;);<br>            var decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);<br>            <span class="hljs-keyword">return</span> decryptedStr.toString();<br>        &#125;<br>    &lt;/script&gt;<br>    &lt;script&gt;<br>        var str = &quot;123456&quot;;<br>        var <span class="hljs-keyword">encrypted</span> = encrypt(str);<br>        var decrypt1 = decrypt(<span class="hljs-keyword">encrypted</span>.toString());<br>        document.writeln(&quot;aes cbc 加密 解密&quot;);<br>        document.writeln(&quot;&lt;br/&gt;&quot;);<br>        document.writeln(&quot;待加密：&quot; + str);<br>        document.writeln(&quot;&lt;br/&gt;&quot;);<br>        document.writeln(&quot;加密的密文:&quot;.concat(<span class="hljs-keyword">encrypted</span>));<br>        document.writeln(&quot;&lt;br/&gt;&quot;);<br>        document.writeln(&quot;解密密文的结果:&quot; + decrypt1);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>代码效果如下图</p><p><img src="/2022/02/27/15/demo1.webp" alt="demo1"></p><h2 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h2><p>借助crypto-js还可以实现一些很好玩的加密，例如静态页面文章的加密。出于某种原因我的文章“造谣人士生平事”之前就使用了这种加密方式。<br>判断文章标题是“加密”开头后，就引入aes.js文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> postTitleValue = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.post-title&quot;</span>).<span class="hljs-property">innerHTML</span>.<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (postTitleValue.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) === <span class="hljs-string">&quot;加密&quot;</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> oScript = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>);</span><br><span class="language-javascript">            oScript.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;./aes.js&quot;</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(oScript);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入aes.js后添加密钥和密钥偏移量输入框，添加加密解密函数，添加点击事件。默认的密钥和密码偏移量都为”1234560000000000”，但是千万不要使用默认密码和密钥，最方便的做法是使用在线随机数生成工具生成随机密钥和随机密钥偏移量。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//aes加密</span><br><span class="hljs-keyword">function</span> encrypt(word, keyy, ivv) &#123;<br>    var key = keyy ? <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>enc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utf8</span>.</span></span>parse(keyy) : <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>enc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utf8</span>.</span></span>parse(<span class="hljs-string">&quot;1234560000000000&quot;</span>); <span class="hljs-comment">//16位</span><br>    var iv = ivv ? <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>enc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utf8</span>.</span></span>parse(ivv) : <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>enc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utf8</span>.</span></span>parse(<span class="hljs-string">&quot;1234567890000000&quot;</span>);<br>    var encrypted = &#x27;&#x27;;<br>    <span class="hljs-keyword">if</span> (typeof (word)<span class="hljs-operator"> == </span>&#x27;<span class="hljs-built_in">string</span>&#x27;) &#123;<br>        var srcs = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>enc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utf8</span>.</span></span>parse(word);<br>        encrypted = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span><span class="hljs-module"><span class="hljs-identifier">AES</span>.</span></span>encrypt(srcs, key, &#123;<br>            iv: iv,<br>            mode: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>mode.CBC,<br>            padding: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>pad.Pkcs7<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeof (word)<span class="hljs-operator"> == </span>&#x27;<span class="hljs-keyword">object</span>&#x27;) &#123; <span class="hljs-comment">//对象格式的转成json字符串</span><br>        data = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>stringify(word);<br>        var srcs = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>enc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utf8</span>.</span></span>parse(data);<br>        encrypted = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span><span class="hljs-module"><span class="hljs-identifier">AES</span>.</span></span>encrypt(srcs, key, &#123;<br>            iv: iv,<br>            mode: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>mode.CBC,<br>            padding: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>pad.Pkcs7<br>        &#125;)<br>    &#125;<br>    return encrypted.ciphertext.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>&#125;<br><span class="hljs-comment">// aes解密</span><br><span class="hljs-keyword">function</span> decrypt(word, keyy, ivv) &#123;<br>    var key = keyy ? <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>enc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utf8</span>.</span></span>parse(keyy) : <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>enc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utf8</span>.</span></span>parse(<span class="hljs-string">&quot;1234560000000000&quot;</span>);<br>    var iv = ivv ? <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>enc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utf8</span>.</span></span>parse(ivv) : <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>enc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utf8</span>.</span></span>parse(<span class="hljs-string">&quot;1234567890000000&quot;</span>);<br>    var encryptedHexStr = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>enc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Hex</span>.</span></span>parse(word);<br>    var srcs = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>enc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Base64</span>.</span></span>stringify(encryptedHexStr);<br>    var decrypt = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span><span class="hljs-module"><span class="hljs-identifier">AES</span>.</span></span>decrypt(srcs, key, &#123;<br>        iv: iv,<br>        mode: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>mode.CBC,<br>        padding: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CryptoJS</span>.</span></span>pad.Pkcs7<br>    &#125;);<br>    var decryptedStr = decrypt.<span class="hljs-keyword">to</span><span class="hljs-constructor">String(CryptoJS.<span class="hljs-params">enc</span>.Utf8)</span>;<br>    return decryptedStr.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>&#125;<br>var lock = document.create<span class="hljs-constructor">Element(<span class="hljs-string">&quot;div&quot;</span>)</span>,<br>    input = document.create<span class="hljs-constructor">Element(<span class="hljs-string">&quot;input&quot;</span>)</span>,<br>    inputIvv = document.create<span class="hljs-constructor">Element(<span class="hljs-string">&quot;input&quot;</span>)</span>,<br>    btn1 = document.create<span class="hljs-constructor">Element(<span class="hljs-string">&quot;button&quot;</span>)</span>,<br>    btn2 = document.create<span class="hljs-constructor">Element(<span class="hljs-string">&quot;button&quot;</span>)</span>,<br>    markdown = document.query<span class="hljs-constructor">Selector(<span class="hljs-string">&quot;.markdown-body&quot;</span>)</span>;<br>    markdown.style.display=<span class="hljs-string">&quot;none&quot;</span><br>lock.id = <span class="hljs-string">&quot;lock&quot;</span>;<br>input.id = <span class="hljs-string">&quot;lock-input&quot;</span>;<br>inputIvv.id = <span class="hljs-string">&quot;lock-inputIvv&quot;</span>;<br>input.<span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;password&quot;</span>;<br>inputIvv.<span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;password&quot;</span>;<br>btn1.id = <span class="hljs-string">&quot;lock-btn1&quot;</span>;<br>btn2.id = <span class="hljs-string">&quot;lock-btn2&quot;</span>;<br>btn1.innerHTML = <span class="hljs-string">&quot;解密&quot;</span>;<br>btn2.innerHTML = <span class="hljs-string">&quot;加密&quot;</span>;<br>document.body.append<span class="hljs-constructor">Child(<span class="hljs-params">lock</span>)</span>;<br>lock.append<span class="hljs-constructor">Child(<span class="hljs-params">input</span>)</span>;<br>lock.append<span class="hljs-constructor">Child(<span class="hljs-params">inputIvv</span>)</span>;<br>lock.append<span class="hljs-constructor">Child(<span class="hljs-params">btn1</span>)</span>;<br>lock.append<span class="hljs-constructor">Child(<span class="hljs-params">btn2</span>)</span>;<br><br>btn1.onclick = <span class="hljs-keyword">function</span> <span class="hljs-literal">()</span> &#123;<br>    var keyy = input.value;<br>    var ivv = inputIvv.value;<br>    var markdownValue = markdown.innerHTML.trim<span class="hljs-literal">()</span>;<br>    <span class="hljs-comment">//去除生成干扰，我的文章每次生成会自动包一层div，这一步是为了保证密文永不改变内容，你们不需要这一步</span><br>    var str = markdownValue.slice(<span class="hljs-number">3</span>,-<span class="hljs-number">4</span>);<br>    console.log(str);<br>    var decr = decrypt(str.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>, keyy, ivv);<br>    markdown.innerHTML = decr.trim<span class="hljs-literal">()</span>;<br>    markdown.style.display=<span class="hljs-string">&quot;block&quot;</span><br>&#125;<br>btn2.onclick = <span class="hljs-keyword">function</span> <span class="hljs-literal">()</span> &#123;<br>    var keyy = input.value;<br>    var ivv = inputIvv.value;<br>    var markdownValue = markdown.innerHTML.trim<span class="hljs-literal">()</span>;<br>    var str = markdownValue;<br>    var decr = encrypt(str.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>, keyy, ivv);<br>    markdown.innerHTML = decr.trim<span class="hljs-literal">()</span>;<br>    markdown.style.display=<span class="hljs-string">&quot;block&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>加密输入框的css，使用了页面压缩，看起来比较乱。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#lock</span>&#123;<span class="hljs-attribute">overflow</span>:hidden;<span class="hljs-attribute">width</span>:<span class="hljs-number">248px</span>;<span class="hljs-attribute">position</span>:absolute;<span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;<span class="hljs-attribute">top</span>:<span class="hljs-number">230px</span>;<span class="hljs-attribute">margin-left</span>:-<span class="hljs-number">100px</span>&#125;<span class="hljs-selector-id">#lock-btn1</span>,<span class="hljs-selector-id">#lock-btn2</span>&#123;<span class="hljs-attribute">margin-left</span>:<span class="hljs-number">31.5px</span>;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<span class="hljs-attribute">display</span>:block;<span class="hljs-attribute">width</span>:<span class="hljs-number">60px</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">20px</span>;<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">20px</span>;<span class="hljs-attribute">background-color</span>:transparent;<span class="hljs-attribute">color</span>:<span class="hljs-number">#000</span>;-webkit-<span class="hljs-attribute">transition</span>:all <span class="hljs-number">150ms</span> linear;-moz-<span class="hljs-attribute">transition</span>:all <span class="hljs-number">150ms</span> linear;-o-<span class="hljs-attribute">transition</span>:all <span class="hljs-number">150ms</span> linear;-ms-<span class="hljs-attribute">transition</span>:all <span class="hljs-number">150ms</span> linear;<span class="hljs-attribute">transition</span>:all <span class="hljs-number">150ms</span> linear;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;<span class="hljs-attribute">font-weight</span>:normal;<span class="hljs-attribute">text-align</span>:center;<span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#66615b</span>&#125;<span class="hljs-selector-id">#lock-btn2</span>&#123;<span class="hljs-attribute">margin-left</span>:<span class="hljs-number">61.5px</span>&#125;<span class="hljs-selector-id">#lock-btn1</span><span class="hljs-selector-pseudo">:hover</span>,<span class="hljs-selector-id">#lock-btn2</span><span class="hljs-selector-pseudo">:hover</span>&#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#66615b</span>;<span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.7</span>);<span class="hljs-attribute">border-color</span>:<span class="hljs-number">#66615b</span>&#125;<span class="hljs-selector-id">#lock-input</span>,<span class="hljs-selector-id">#lock-inputIvv</span>&#123;<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">20px</span>;<span class="hljs-attribute">outline</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span> <span class="hljs-number">10px</span>;<span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">20px</span>;<span class="hljs-attribute">background</span>:transparent;<span class="hljs-attribute">color</span>:<span class="hljs-number">#000</span>;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">1.25em</span>;<span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>&#125;<span class="hljs-selector-id">#lock-input</span><span class="hljs-selector-pseudo">:hover</span>,<span class="hljs-selector-id">#lock-inputIvv</span><span class="hljs-selector-pseudo">:hover</span>&#123;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#66615b</span>;<span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.7</span>);<span class="hljs-attribute">border-color</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.7</span>)&#125;<br></code></pre></td></tr></table></figure><p>每次需要发布加密的文章时，将文章标题命名为”加密.XXX“，页面就会出现加密解密框，首次发布请输入密钥和密钥偏移量 点击加密，拿到密文。然后将文章内容改为密文。保存好你的密钥和密钥偏移量，以后查看加密文章时，输入密钥和密钥偏移量 点击解密，即可看到原始的文章。<br>代码效果如下两图</p><p><img src="/2022/02/27/15/demo2.webp" alt="demo2"></p><p><img src="/2022/02/27/15/demo3.webp" alt="demo3"></p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ngnix使用CDN后正确获取访客IP</title>
    <link href="/2020/08/30/9/"/>
    <url>/2020/08/30/9/</url>
    
    <content type="html"><![CDATA[<p>如果是使用一层cdn，那么在nginx的配置文件http{}字段中加入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">set_real_ip_from</span> <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>;<br><span class="hljs-attribute">real_ip_header</span> X-Forwarded-For;<br></code></pre></td></tr></table></figure><p>即可。</p><p>如果是使用了两层或以上cdn(使用了cdn和web防火墙也适用)，那么在nginx的配置文件http{}字段中加入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">set_real_ip_from</span> <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span>;<br><span class="hljs-attribute">real_ip_header</span> X-Forwarded-For;<br><span class="hljs-attribute">real_ip_recursive</span> <span class="hljs-literal">on</span>;<br></code></pre></td></tr></table></figure><p>即可。</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ngnix开启HSTS</title>
    <link href="/2020/08/17/8/"/>
    <url>/2020/08/17/8/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是HSTS"><a href="#什么是HSTS" class="headerlink" title="什么是HSTS"></a>什么是HSTS</h2><blockquote><p>HTTP严格传输安全协议（英语：HTTP Strict Transport Security，简称：HSTS），是一套由互联网工程任务组发布的互联网安全策略机制。网站可以选择使用HSTS策略，来让浏览器强制使用HTTPS与网站进行通信，以减少会话劫持风险。<br>HSTS可以很大程度上解决SSL剥离攻击，因为只要浏览器曾经与服务器创建过一次安全连接，之后浏览器会强制使用HTTPS，即使链接被换成了HTTP。<br>##开启HSTS证书的前提##<br>正确设置了SSL证书，网站可以通过https协议正常访问<br>##ngnix如何开启HSTS##<br>在网站配置文件server{}中加入</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">add_header <span class="hljs-keyword">Strict</span>-Transport-<span class="hljs-keyword">Security</span> &quot;max-age=31536000;<br></code></pre></td></tr></table></figure><p>如果追求更好的安全效果可以改成加入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">add_header <span class="hljs-keyword">Strict</span>-Transport-<span class="hljs-keyword">Security</span> &quot;max-age=31536000; includeSubdomains; preload&quot;;<br><br></code></pre></td></tr></table></figure><h4 id="includeSubdomains参数会使得浏览器在请求所有子域名时都强制要求HTTPS协议，如果没有给所有子域名都添加SSL证书的打算，请不要输入这个参数"><a href="#includeSubdomains参数会使得浏览器在请求所有子域名时都强制要求HTTPS协议，如果没有给所有子域名都添加SSL证书的打算，请不要输入这个参数" class="headerlink" title="includeSubdomains参数会使得浏览器在请求所有子域名时都强制要求HTTPS协议，如果没有给所有子域名都添加SSL证书的打算，请不要输入这个参数"></a>includeSubdomains参数会使得浏览器在请求所有子域名时都强制要求HTTPS协议，如果没有给所有子域名都添加SSL证书的打算，请不要输入这个参数</h4>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何清理域名解析的本地dns缓存</title>
    <link href="/2020/07/03/4/"/>
    <url>/2020/07/03/4/</url>
    
    <content type="html"><![CDATA[<p>清理本地缓存的快捷方法：</p><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>Win+R快捷键</p><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p>输入：cmd</p><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>输入：ipconfig&#x2F;flushdns 然后按回车<br><img src="/2020/07/03/4/1.png"></p><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p>愉快的访问需要访问的网站</p>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>欢迎使用 WordPress</title>
    <link href="/2020/06/22/1/"/>
    <url>/2020/06/22/1/</url>
    
    <content type="html"><![CDATA[<p>如果您看到这篇文章,表示您的 blog 已经安装成功…</p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
