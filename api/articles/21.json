{"title":"vue自定义全局指令实现拖拽弹窗等元素","slug":"21","date":"2022-12-30T14:44:42.000Z","updated":"2022-12-30T14:44:42.000Z","comments":true,"path":"api/articles/21.json","excerpt":null,"covers":null,"content":"<h2 id=\"全局注册指令\"><a href=\"#全局注册指令\" class=\"headerlink\" title=\"全局注册指令\"></a>全局注册指令</h2><p>注意：bind是vue2的自定义指令事件，如果你在vue3中使用请把bind改为beforeMount，附上vue2指令的生命周期函数和vue3的对比。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"center\">vue3</th>\n<th align=\"right\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">bind</td>\n<td align=\"center\">beforeMount</td>\n<td align=\"right\">指令绑定到元素后执行。只执行一次。</td>\n</tr>\n<tr>\n<td align=\"left\">inserted</td>\n<td align=\"center\">mounted</td>\n<td align=\"right\">元素插入父 DOM 后执行</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"center\">beforeUpdate</td>\n<td align=\"right\">元素本身更新之前执行</td>\n</tr>\n<tr>\n<td align=\"left\">componentUpdated</td>\n<td align=\"center\">updated</td>\n<td align=\"right\">组件和子级更新后执行</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"center\">beforeUnmount</td>\n<td align=\"right\">卸载元素之前执行</td>\n</tr>\n<tr>\n<td align=\"left\">unbind</td>\n<td align=\"center\">unmounted</td>\n<td align=\"right\">指令被移除，就会执行，也只执行一次</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">directive</span>(<span class=\"hljs-string\">&#x27;move&#x27;</span>, &#123;<br>  <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">el</span>) &#123;<br>    <br>      <span class=\"hljs-keyword\">let</span> moveElement = el.<span class=\"hljs-property\">firstElementChild</span>;<br>      el.<span class=\"hljs-property\">mouseDown</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <br>          <span class=\"hljs-comment\">// X,Y为计算的偏移量，就是鼠标点击的位置相对于元素左上角圆点的距离</span><br>          <span class=\"hljs-keyword\">let</span> X = e.<span class=\"hljs-property\">clientX</span> - el.<span class=\"hljs-property\">offsetLeft</span>;<br>          <span class=\"hljs-keyword\">let</span> Y = e.<span class=\"hljs-property\">clientY</span> - el.<span class=\"hljs-property\">offsetTop</span>;<br>          <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">move</span> = (<span class=\"hljs-params\">e</span>) =&gt; &#123;<br>              <span class=\"hljs-comment\">// 0 &lt; left &amp;&amp; left &lt; window.innerWidth - el.offsetWidth 保证移动过程中，元素不超出窗口</span><br>              <span class=\"hljs-keyword\">let</span> left = e.<span class=\"hljs-property\">clientX</span> - X;<br>              <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt; left &amp;&amp; left &lt; <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerWidth</span> - el.<span class=\"hljs-property\">offsetWidth</span>) &#123;<br>              el.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">left</span> = left + <span class=\"hljs-string\">&#x27;px&#x27;</span>;<br>              &#125;<br>              <span class=\"hljs-comment\">// console.log(left, window.innerWidth, el.offsetWidth)</span><br><br>              <span class=\"hljs-comment\">// 0 &lt; top &amp;&amp; top &lt; window.innerHeight - el.offsetHeight 保证移动过程中，元素不超出窗口</span><br>              <span class=\"hljs-keyword\">let</span> top = e.<span class=\"hljs-property\">clientY</span> - Y;<br>              <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt; top &amp;&amp; top &lt; <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerHeight</span> - el.<span class=\"hljs-property\">offsetHeight</span>) &#123;<br>              el.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">top</span> = top + <span class=\"hljs-string\">&#x27;px&#x27;</span>;<br>              &#125;<br>              <span class=\"hljs-comment\">// console.log(top, window.innerHeight, el.offsetHeight)</span><br>          &#125;<br>          <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;mousemove&#x27;</span>, move)<br>          <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;mouseup&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>              <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&#x27;mousemove&#x27;</span>, move)<br>          &#125;)<br>      &#125;<br>      moveElement.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;mousedown&#x27;</span>, el.<span class=\"hljs-property\">mouseDown</span>);<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-section\">&lt;div v-move&gt;</span> <span class=\"hljs-section\">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"优化空间\"><a href=\"#优化空间\" class=\"headerlink\" title=\"优化空间\"></a>优化空间</h2><p> 指令来源于互联网，感觉还有优化的空间，例如<br> 1.目前是默认指定元素的第一个子元素为绑定拖拽事件的元素，一般为弹窗的title区。可以再加一个参数v-mode&#x3D;”#title”来自定义绑定拖拽事件的元素。<br> 2.目前弹窗关闭后再次打开，上次拖拽添加的”top”和”left”还在，会导致弹窗不能恢复到默认位置，只能在弹窗关闭的事件里再额外执行this.$refs[“绑定指令的弹窗元素”].style.cssText &#x3D; ‘display: none;’，使用起来比较麻烦，最好能在指令里能监听元素状态是否为’display: none;’，如果是none隐藏状态，就删除元素style中的”top”和”left”</p>\n","more":"<h2 id=\"全局注册指令\"><a href=\"#全局注册指令\" class=\"headerlink\" title=\"全局注册指令\"></a>全局注册指令</h2><p>注意：bind是vue2的自定义指令事件，如果你在vue3中使用请把bind改为beforeMount，附上vue2指令的生命周期函数和vue3的对比。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">vue2</th>\n<th align=\"center\">vue3</th>\n<th align=\"right\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">bind</td>\n<td align=\"center\">beforeMount</td>\n<td align=\"right\">指令绑定到元素后执行。只执行一次。</td>\n</tr>\n<tr>\n<td align=\"left\">inserted</td>\n<td align=\"center\">mounted</td>\n<td align=\"right\">元素插入父 DOM 后执行</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"center\">beforeUpdate</td>\n<td align=\"right\">元素本身更新之前执行</td>\n</tr>\n<tr>\n<td align=\"left\">componentUpdated</td>\n<td align=\"center\">updated</td>\n<td align=\"right\">组件和子级更新后执行</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"center\">beforeUnmount</td>\n<td align=\"right\">卸载元素之前执行</td>\n</tr>\n<tr>\n<td align=\"left\">unbind</td>\n<td align=\"center\">unmounted</td>\n<td align=\"right\">指令被移除，就会执行，也只执行一次</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">directive</span>(<span class=\"hljs-string\">&#x27;move&#x27;</span>, &#123;<br>  <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">el</span>) &#123;<br>    <br>      <span class=\"hljs-keyword\">let</span> moveElement = el.<span class=\"hljs-property\">firstElementChild</span>;<br>      el.<span class=\"hljs-property\">mouseDown</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <br>          <span class=\"hljs-comment\">// X,Y为计算的偏移量，就是鼠标点击的位置相对于元素左上角圆点的距离</span><br>          <span class=\"hljs-keyword\">let</span> X = e.<span class=\"hljs-property\">clientX</span> - el.<span class=\"hljs-property\">offsetLeft</span>;<br>          <span class=\"hljs-keyword\">let</span> Y = e.<span class=\"hljs-property\">clientY</span> - el.<span class=\"hljs-property\">offsetTop</span>;<br>          <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">move</span> = (<span class=\"hljs-params\">e</span>) =&gt; &#123;<br>              <span class=\"hljs-comment\">// 0 &lt; left &amp;&amp; left &lt; window.innerWidth - el.offsetWidth 保证移动过程中，元素不超出窗口</span><br>              <span class=\"hljs-keyword\">let</span> left = e.<span class=\"hljs-property\">clientX</span> - X;<br>              <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt; left &amp;&amp; left &lt; <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerWidth</span> - el.<span class=\"hljs-property\">offsetWidth</span>) &#123;<br>              el.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">left</span> = left + <span class=\"hljs-string\">&#x27;px&#x27;</span>;<br>              &#125;<br>              <span class=\"hljs-comment\">// console.log(left, window.innerWidth, el.offsetWidth)</span><br><br>              <span class=\"hljs-comment\">// 0 &lt; top &amp;&amp; top &lt; window.innerHeight - el.offsetHeight 保证移动过程中，元素不超出窗口</span><br>              <span class=\"hljs-keyword\">let</span> top = e.<span class=\"hljs-property\">clientY</span> - Y;<br>              <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> &lt; top &amp;&amp; top &lt; <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerHeight</span> - el.<span class=\"hljs-property\">offsetHeight</span>) &#123;<br>              el.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">top</span> = top + <span class=\"hljs-string\">&#x27;px&#x27;</span>;<br>              &#125;<br>              <span class=\"hljs-comment\">// console.log(top, window.innerHeight, el.offsetHeight)</span><br>          &#125;<br>          <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;mousemove&#x27;</span>, move)<br>          <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;mouseup&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>              <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&#x27;mousemove&#x27;</span>, move)<br>          &#125;)<br>      &#125;<br>      moveElement.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;mousedown&#x27;</span>, el.<span class=\"hljs-property\">mouseDown</span>);<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-section\">&lt;div v-move&gt;</span> <span class=\"hljs-section\">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"优化空间\"><a href=\"#优化空间\" class=\"headerlink\" title=\"优化空间\"></a>优化空间</h2><p> 指令来源于互联网，感觉还有优化的空间，例如<br> 1.目前是默认指定元素的第一个子元素为绑定拖拽事件的元素，一般为弹窗的title区。可以再加一个参数v-mode&#x3D;”#title”来自定义绑定拖拽事件的元素。<br> 2.目前弹窗关闭后再次打开，上次拖拽添加的”top”和”left”还在，会导致弹窗不能恢复到默认位置，只能在弹窗关闭的事件里再额外执行this.$refs[“绑定指令的弹窗元素”].style.cssText &#x3D; ‘display: none;’，使用起来比较麻烦，最好能在指令里能监听元素状态是否为’display: none;’，如果是none隐藏状态，就删除元素style中的”top”和”left”</p>\n","categories":[{"name":"IT","path":"api/categories/IT.json"}],"tags":[{"name":"vue","path":"api/tags/vue.json"}]}